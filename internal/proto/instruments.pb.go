// Code generated by protoc-gen-go. DO NOT EDIT.
// source: instruments.proto

package investapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Тип купонов.
type CouponType int32

const (
	CouponType_COUPON_TYPE_UNSPECIFIED CouponType = 0
	CouponType_COUPON_TYPE_CONSTANT    CouponType = 1
	CouponType_COUPON_TYPE_FLOATING    CouponType = 2
	CouponType_COUPON_TYPE_DISCOUNT    CouponType = 3
	CouponType_COUPON_TYPE_MORTGAGE    CouponType = 4
	CouponType_COUPON_TYPE_FIX         CouponType = 5
	CouponType_COUPON_TYPE_VARIABLE    CouponType = 6
	CouponType_COUPON_TYPE_OTHER       CouponType = 7
)

var CouponType_name = map[int32]string{
	0: "COUPON_TYPE_UNSPECIFIED",
	1: "COUPON_TYPE_CONSTANT",
	2: "COUPON_TYPE_FLOATING",
	3: "COUPON_TYPE_DISCOUNT",
	4: "COUPON_TYPE_MORTGAGE",
	5: "COUPON_TYPE_FIX",
	6: "COUPON_TYPE_VARIABLE",
	7: "COUPON_TYPE_OTHER",
}

var CouponType_value = map[string]int32{
	"COUPON_TYPE_UNSPECIFIED": 0,
	"COUPON_TYPE_CONSTANT":    1,
	"COUPON_TYPE_FLOATING":    2,
	"COUPON_TYPE_DISCOUNT":    3,
	"COUPON_TYPE_MORTGAGE":    4,
	"COUPON_TYPE_FIX":         5,
	"COUPON_TYPE_VARIABLE":    6,
	"COUPON_TYPE_OTHER":       7,
}

func (x CouponType) String() string {
	return proto.EnumName(CouponType_name, int32(x))
}

func (CouponType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{0}
}

//Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
type InstrumentIdType int32

const (
	InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED InstrumentIdType = 0
	InstrumentIdType_INSTRUMENT_ID_TYPE_FIGI   InstrumentIdType = 1
	InstrumentIdType_INSTRUMENT_ID_TYPE_TICKER InstrumentIdType = 2
	InstrumentIdType_INSTRUMENT_ID_TYPE_UID    InstrumentIdType = 3
)

var InstrumentIdType_name = map[int32]string{
	0: "INSTRUMENT_ID_UNSPECIFIED",
	1: "INSTRUMENT_ID_TYPE_FIGI",
	2: "INSTRUMENT_ID_TYPE_TICKER",
	3: "INSTRUMENT_ID_TYPE_UID",
}

var InstrumentIdType_value = map[string]int32{
	"INSTRUMENT_ID_UNSPECIFIED": 0,
	"INSTRUMENT_ID_TYPE_FIGI":   1,
	"INSTRUMENT_ID_TYPE_TICKER": 2,
	"INSTRUMENT_ID_TYPE_UID":    3,
}

func (x InstrumentIdType) String() string {
	return proto.EnumName(InstrumentIdType_name, int32(x))
}

func (InstrumentIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{1}
}

//Статус запрашиваемых инструментов.
type InstrumentStatus int32

const (
	InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED InstrumentStatus = 0
	InstrumentStatus_INSTRUMENT_STATUS_BASE        InstrumentStatus = 1
	InstrumentStatus_INSTRUMENT_STATUS_ALL         InstrumentStatus = 2
)

var InstrumentStatus_name = map[int32]string{
	0: "INSTRUMENT_STATUS_UNSPECIFIED",
	1: "INSTRUMENT_STATUS_BASE",
	2: "INSTRUMENT_STATUS_ALL",
}

var InstrumentStatus_value = map[string]int32{
	"INSTRUMENT_STATUS_UNSPECIFIED": 0,
	"INSTRUMENT_STATUS_BASE":        1,
	"INSTRUMENT_STATUS_ALL":         2,
}

func (x InstrumentStatus) String() string {
	return proto.EnumName(InstrumentStatus_name, int32(x))
}

func (InstrumentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{2}
}

//Тип акций.
type ShareType int32

const (
	ShareType_SHARE_TYPE_UNSPECIFIED     ShareType = 0
	ShareType_SHARE_TYPE_COMMON          ShareType = 1
	ShareType_SHARE_TYPE_PREFERRED       ShareType = 2
	ShareType_SHARE_TYPE_ADR             ShareType = 3
	ShareType_SHARE_TYPE_GDR             ShareType = 4
	ShareType_SHARE_TYPE_MLP             ShareType = 5
	ShareType_SHARE_TYPE_NY_REG_SHRS     ShareType = 6
	ShareType_SHARE_TYPE_CLOSED_END_FUND ShareType = 7
	ShareType_SHARE_TYPE_REIT            ShareType = 8
)

var ShareType_name = map[int32]string{
	0: "SHARE_TYPE_UNSPECIFIED",
	1: "SHARE_TYPE_COMMON",
	2: "SHARE_TYPE_PREFERRED",
	3: "SHARE_TYPE_ADR",
	4: "SHARE_TYPE_GDR",
	5: "SHARE_TYPE_MLP",
	6: "SHARE_TYPE_NY_REG_SHRS",
	7: "SHARE_TYPE_CLOSED_END_FUND",
	8: "SHARE_TYPE_REIT",
}

var ShareType_value = map[string]int32{
	"SHARE_TYPE_UNSPECIFIED":     0,
	"SHARE_TYPE_COMMON":          1,
	"SHARE_TYPE_PREFERRED":       2,
	"SHARE_TYPE_ADR":             3,
	"SHARE_TYPE_GDR":             4,
	"SHARE_TYPE_MLP":             5,
	"SHARE_TYPE_NY_REG_SHRS":     6,
	"SHARE_TYPE_CLOSED_END_FUND": 7,
	"SHARE_TYPE_REIT":            8,
}

func (x ShareType) String() string {
	return proto.EnumName(ShareType_name, int32(x))
}

func (ShareType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{3}
}

//Тип актива.
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	AssetType_ASSET_TYPE_CURRENCY    AssetType = 1
	AssetType_ASSET_TYPE_COMMODITY   AssetType = 2
	AssetType_ASSET_TYPE_INDEX       AssetType = 3
	AssetType_ASSET_TYPE_SECURITY    AssetType = 4
)

var AssetType_name = map[int32]string{
	0: "ASSET_TYPE_UNSPECIFIED",
	1: "ASSET_TYPE_CURRENCY",
	2: "ASSET_TYPE_COMMODITY",
	3: "ASSET_TYPE_INDEX",
	4: "ASSET_TYPE_SECURITY",
}

var AssetType_value = map[string]int32{
	"ASSET_TYPE_UNSPECIFIED": 0,
	"ASSET_TYPE_CURRENCY":    1,
	"ASSET_TYPE_COMMODITY":   2,
	"ASSET_TYPE_INDEX":       3,
	"ASSET_TYPE_SECURITY":    4,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{4}
}

//Тип структурной ноты.
type StructuredProductType int32

const (
	StructuredProductType_SP_TYPE_UNSPECIFIED     StructuredProductType = 0
	StructuredProductType_SP_TYPE_DELIVERABLE     StructuredProductType = 1
	StructuredProductType_SP_TYPE_NON_DELIVERABLE StructuredProductType = 2
)

var StructuredProductType_name = map[int32]string{
	0: "SP_TYPE_UNSPECIFIED",
	1: "SP_TYPE_DELIVERABLE",
	2: "SP_TYPE_NON_DELIVERABLE",
}

var StructuredProductType_value = map[string]int32{
	"SP_TYPE_UNSPECIFIED":     0,
	"SP_TYPE_DELIVERABLE":     1,
	"SP_TYPE_NON_DELIVERABLE": 2,
}

func (x StructuredProductType) String() string {
	return proto.EnumName(StructuredProductType_name, int32(x))
}

func (StructuredProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{5}
}

//Тип действия со списком избранных инструментов.
type EditFavoritesActionType int32

const (
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED EditFavoritesActionType = 0
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_ADD         EditFavoritesActionType = 1
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_DEL         EditFavoritesActionType = 2
)

var EditFavoritesActionType_name = map[int32]string{
	0: "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED",
	1: "EDIT_FAVORITES_ACTION_TYPE_ADD",
	2: "EDIT_FAVORITES_ACTION_TYPE_DEL",
}

var EditFavoritesActionType_value = map[string]int32{
	"EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED": 0,
	"EDIT_FAVORITES_ACTION_TYPE_ADD":         1,
	"EDIT_FAVORITES_ACTION_TYPE_DEL":         2,
}

func (x EditFavoritesActionType) String() string {
	return proto.EnumName(EditFavoritesActionType_name, int32(x))
}

func (EditFavoritesActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{6}
}

//Реальная площадка исполнения расчётов.
type RealExchange int32

const (
	RealExchange_REAL_EXCHANGE_UNSPECIFIED RealExchange = 0
	RealExchange_REAL_EXCHANGE_MOEX        RealExchange = 1
	RealExchange_REAL_EXCHANGE_RTS         RealExchange = 2
	RealExchange_REAL_EXCHANGE_OTC         RealExchange = 3
)

var RealExchange_name = map[int32]string{
	0: "REAL_EXCHANGE_UNSPECIFIED",
	1: "REAL_EXCHANGE_MOEX",
	2: "REAL_EXCHANGE_RTS",
	3: "REAL_EXCHANGE_OTC",
}

var RealExchange_value = map[string]int32{
	"REAL_EXCHANGE_UNSPECIFIED": 0,
	"REAL_EXCHANGE_MOEX":        1,
	"REAL_EXCHANGE_RTS":         2,
	"REAL_EXCHANGE_OTC":         3,
}

func (x RealExchange) String() string {
	return proto.EnumName(RealExchange_name, int32(x))
}

func (RealExchange) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{7}
}

//Запрос расписания торгов
type TradingSchedulesRequest struct {
	Exchange             string               `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	From                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TradingSchedulesRequest) Reset()         { *m = TradingSchedulesRequest{} }
func (m *TradingSchedulesRequest) String() string { return proto.CompactTextString(m) }
func (*TradingSchedulesRequest) ProtoMessage()    {}
func (*TradingSchedulesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{0}
}

func (m *TradingSchedulesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingSchedulesRequest.Unmarshal(m, b)
}
func (m *TradingSchedulesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingSchedulesRequest.Marshal(b, m, deterministic)
}
func (m *TradingSchedulesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSchedulesRequest.Merge(m, src)
}
func (m *TradingSchedulesRequest) XXX_Size() int {
	return xxx_messageInfo_TradingSchedulesRequest.Size(m)
}
func (m *TradingSchedulesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSchedulesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSchedulesRequest proto.InternalMessageInfo

func (m *TradingSchedulesRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *TradingSchedulesRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TradingSchedulesRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

//Список торговых площадок
type TradingSchedulesResponse struct {
	Exchanges            []*TradingSchedule `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TradingSchedulesResponse) Reset()         { *m = TradingSchedulesResponse{} }
func (m *TradingSchedulesResponse) String() string { return proto.CompactTextString(m) }
func (*TradingSchedulesResponse) ProtoMessage()    {}
func (*TradingSchedulesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{1}
}

func (m *TradingSchedulesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingSchedulesResponse.Unmarshal(m, b)
}
func (m *TradingSchedulesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingSchedulesResponse.Marshal(b, m, deterministic)
}
func (m *TradingSchedulesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSchedulesResponse.Merge(m, src)
}
func (m *TradingSchedulesResponse) XXX_Size() int {
	return xxx_messageInfo_TradingSchedulesResponse.Size(m)
}
func (m *TradingSchedulesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSchedulesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSchedulesResponse proto.InternalMessageInfo

func (m *TradingSchedulesResponse) GetExchanges() []*TradingSchedule {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

//Данные по торговой площадке.
type TradingSchedule struct {
	Exchange             string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Days                 []*TradingDay `protobuf:"bytes,2,rep,name=days,proto3" json:"days,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TradingSchedule) Reset()         { *m = TradingSchedule{} }
func (m *TradingSchedule) String() string { return proto.CompactTextString(m) }
func (*TradingSchedule) ProtoMessage()    {}
func (*TradingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{2}
}

func (m *TradingSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingSchedule.Unmarshal(m, b)
}
func (m *TradingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingSchedule.Marshal(b, m, deterministic)
}
func (m *TradingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSchedule.Merge(m, src)
}
func (m *TradingSchedule) XXX_Size() int {
	return xxx_messageInfo_TradingSchedule.Size(m)
}
func (m *TradingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSchedule proto.InternalMessageInfo

func (m *TradingSchedule) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *TradingSchedule) GetDays() []*TradingDay {
	if m != nil {
		return m.Days
	}
	return nil
}

//Информация о времени торгов.
type TradingDay struct {
	Date                           *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	IsTradingDay                   bool                 `protobuf:"varint,2,opt,name=is_trading_day,json=isTradingDay,proto3" json:"is_trading_day,omitempty"`
	StartTime                      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                        *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OpeningAuctionStartTime        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=opening_auction_start_time,json=openingAuctionStartTime,proto3" json:"opening_auction_start_time,omitempty"`
	ClosingAuctionEndTime          *timestamp.Timestamp `protobuf:"bytes,8,opt,name=closing_auction_end_time,json=closingAuctionEndTime,proto3" json:"closing_auction_end_time,omitempty"`
	EveningOpeningAuctionStartTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=evening_opening_auction_start_time,json=eveningOpeningAuctionStartTime,proto3" json:"evening_opening_auction_start_time,omitempty"`
	EveningStartTime               *timestamp.Timestamp `protobuf:"bytes,10,opt,name=evening_start_time,json=eveningStartTime,proto3" json:"evening_start_time,omitempty"`
	EveningEndTime                 *timestamp.Timestamp `protobuf:"bytes,11,opt,name=evening_end_time,json=eveningEndTime,proto3" json:"evening_end_time,omitempty"`
	ClearingStartTime              *timestamp.Timestamp `protobuf:"bytes,12,opt,name=clearing_start_time,json=clearingStartTime,proto3" json:"clearing_start_time,omitempty"`
	ClearingEndTime                *timestamp.Timestamp `protobuf:"bytes,13,opt,name=clearing_end_time,json=clearingEndTime,proto3" json:"clearing_end_time,omitempty"`
	PremarketStartTime             *timestamp.Timestamp `protobuf:"bytes,14,opt,name=premarket_start_time,json=premarketStartTime,proto3" json:"premarket_start_time,omitempty"`
	PremarketEndTime               *timestamp.Timestamp `protobuf:"bytes,15,opt,name=premarket_end_time,json=premarketEndTime,proto3" json:"premarket_end_time,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}             `json:"-"`
	XXX_unrecognized               []byte               `json:"-"`
	XXX_sizecache                  int32                `json:"-"`
}

func (m *TradingDay) Reset()         { *m = TradingDay{} }
func (m *TradingDay) String() string { return proto.CompactTextString(m) }
func (*TradingDay) ProtoMessage()    {}
func (*TradingDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{3}
}

func (m *TradingDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingDay.Unmarshal(m, b)
}
func (m *TradingDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingDay.Marshal(b, m, deterministic)
}
func (m *TradingDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingDay.Merge(m, src)
}
func (m *TradingDay) XXX_Size() int {
	return xxx_messageInfo_TradingDay.Size(m)
}
func (m *TradingDay) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingDay.DiscardUnknown(m)
}

var xxx_messageInfo_TradingDay proto.InternalMessageInfo

func (m *TradingDay) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *TradingDay) GetIsTradingDay() bool {
	if m != nil {
		return m.IsTradingDay
	}
	return false
}

func (m *TradingDay) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TradingDay) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TradingDay) GetOpeningAuctionStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.OpeningAuctionStartTime
	}
	return nil
}

func (m *TradingDay) GetClosingAuctionEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.ClosingAuctionEndTime
	}
	return nil
}

func (m *TradingDay) GetEveningOpeningAuctionStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.EveningOpeningAuctionStartTime
	}
	return nil
}

func (m *TradingDay) GetEveningStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.EveningStartTime
	}
	return nil
}

func (m *TradingDay) GetEveningEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EveningEndTime
	}
	return nil
}

func (m *TradingDay) GetClearingStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.ClearingStartTime
	}
	return nil
}

func (m *TradingDay) GetClearingEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.ClearingEndTime
	}
	return nil
}

func (m *TradingDay) GetPremarketStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.PremarketStartTime
	}
	return nil
}

func (m *TradingDay) GetPremarketEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.PremarketEndTime
	}
	return nil
}

//Запрос получения инструмента по идентификатору.
type InstrumentRequest struct {
	IdType               InstrumentIdType `protobuf:"varint,1,opt,name=id_type,json=idType,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentIdType" json:"id_type,omitempty"`
	ClassCode            string           `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Id                   string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstrumentRequest) Reset()         { *m = InstrumentRequest{} }
func (m *InstrumentRequest) String() string { return proto.CompactTextString(m) }
func (*InstrumentRequest) ProtoMessage()    {}
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{4}
}

func (m *InstrumentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentRequest.Unmarshal(m, b)
}
func (m *InstrumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentRequest.Marshal(b, m, deterministic)
}
func (m *InstrumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentRequest.Merge(m, src)
}
func (m *InstrumentRequest) XXX_Size() int {
	return xxx_messageInfo_InstrumentRequest.Size(m)
}
func (m *InstrumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentRequest proto.InternalMessageInfo

func (m *InstrumentRequest) GetIdType() InstrumentIdType {
	if m != nil {
		return m.IdType
	}
	return InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED
}

func (m *InstrumentRequest) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *InstrumentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//Запрос получения инструментов.
type InstrumentsRequest struct {
	InstrumentStatus     InstrumentStatus `protobuf:"varint,1,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentStatus" json:"instrument_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstrumentsRequest) Reset()         { *m = InstrumentsRequest{} }
func (m *InstrumentsRequest) String() string { return proto.CompactTextString(m) }
func (*InstrumentsRequest) ProtoMessage()    {}
func (*InstrumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{5}
}

func (m *InstrumentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentsRequest.Unmarshal(m, b)
}
func (m *InstrumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentsRequest.Marshal(b, m, deterministic)
}
func (m *InstrumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentsRequest.Merge(m, src)
}
func (m *InstrumentsRequest) XXX_Size() int {
	return xxx_messageInfo_InstrumentsRequest.Size(m)
}
func (m *InstrumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentsRequest proto.InternalMessageInfo

func (m *InstrumentsRequest) GetInstrumentStatus() InstrumentStatus {
	if m != nil {
		return m.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

//Информация об облигации.
type BondResponse struct {
	Instrument           *Bond    `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BondResponse) Reset()         { *m = BondResponse{} }
func (m *BondResponse) String() string { return proto.CompactTextString(m) }
func (*BondResponse) ProtoMessage()    {}
func (*BondResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{6}
}

func (m *BondResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondResponse.Unmarshal(m, b)
}
func (m *BondResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondResponse.Marshal(b, m, deterministic)
}
func (m *BondResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondResponse.Merge(m, src)
}
func (m *BondResponse) XXX_Size() int {
	return xxx_messageInfo_BondResponse.Size(m)
}
func (m *BondResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BondResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BondResponse proto.InternalMessageInfo

func (m *BondResponse) GetInstrument() *Bond {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Список облигаций.
type BondsResponse struct {
	Instruments          []*Bond  `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BondsResponse) Reset()         { *m = BondsResponse{} }
func (m *BondsResponse) String() string { return proto.CompactTextString(m) }
func (*BondsResponse) ProtoMessage()    {}
func (*BondsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{7}
}

func (m *BondsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondsResponse.Unmarshal(m, b)
}
func (m *BondsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondsResponse.Marshal(b, m, deterministic)
}
func (m *BondsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondsResponse.Merge(m, src)
}
func (m *BondsResponse) XXX_Size() int {
	return xxx_messageInfo_BondsResponse.Size(m)
}
func (m *BondsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BondsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BondsResponse proto.InternalMessageInfo

func (m *BondsResponse) GetInstruments() []*Bond {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Запрос купонов по облигации.
type GetBondCouponsRequest struct {
	Figi                 string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	From                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetBondCouponsRequest) Reset()         { *m = GetBondCouponsRequest{} }
func (m *GetBondCouponsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBondCouponsRequest) ProtoMessage()    {}
func (*GetBondCouponsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{8}
}

func (m *GetBondCouponsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBondCouponsRequest.Unmarshal(m, b)
}
func (m *GetBondCouponsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBondCouponsRequest.Marshal(b, m, deterministic)
}
func (m *GetBondCouponsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBondCouponsRequest.Merge(m, src)
}
func (m *GetBondCouponsRequest) XXX_Size() int {
	return xxx_messageInfo_GetBondCouponsRequest.Size(m)
}
func (m *GetBondCouponsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBondCouponsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBondCouponsRequest proto.InternalMessageInfo

func (m *GetBondCouponsRequest) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *GetBondCouponsRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GetBondCouponsRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

//Купоны по облигации.
type GetBondCouponsResponse struct {
	Events               []*Coupon `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetBondCouponsResponse) Reset()         { *m = GetBondCouponsResponse{} }
func (m *GetBondCouponsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBondCouponsResponse) ProtoMessage()    {}
func (*GetBondCouponsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{9}
}

func (m *GetBondCouponsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBondCouponsResponse.Unmarshal(m, b)
}
func (m *GetBondCouponsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBondCouponsResponse.Marshal(b, m, deterministic)
}
func (m *GetBondCouponsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBondCouponsResponse.Merge(m, src)
}
func (m *GetBondCouponsResponse) XXX_Size() int {
	return xxx_messageInfo_GetBondCouponsResponse.Size(m)
}
func (m *GetBondCouponsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBondCouponsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBondCouponsResponse proto.InternalMessageInfo

func (m *GetBondCouponsResponse) GetEvents() []*Coupon {
	if m != nil {
		return m.Events
	}
	return nil
}

//Объект передачи информации о купоне облигации.
type Coupon struct {
	Figi                 string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	CouponDate           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=coupon_date,json=couponDate,proto3" json:"coupon_date,omitempty"`
	CouponNumber         int64                `protobuf:"varint,3,opt,name=coupon_number,json=couponNumber,proto3" json:"coupon_number,omitempty"`
	FixDate              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=fix_date,json=fixDate,proto3" json:"fix_date,omitempty"`
	PayOneBond           *MoneyValue          `protobuf:"bytes,5,opt,name=pay_one_bond,json=payOneBond,proto3" json:"pay_one_bond,omitempty"`
	CouponType           CouponType           `protobuf:"varint,6,opt,name=coupon_type,json=couponType,proto3,enum=tinkoff.public.invest.api.contract.v1.CouponType" json:"coupon_type,omitempty"`
	CouponStartDate      *timestamp.Timestamp `protobuf:"bytes,7,opt,name=coupon_start_date,json=couponStartDate,proto3" json:"coupon_start_date,omitempty"`
	CouponEndDate        *timestamp.Timestamp `protobuf:"bytes,8,opt,name=coupon_end_date,json=couponEndDate,proto3" json:"coupon_end_date,omitempty"`
	CouponPeriod         int32                `protobuf:"varint,9,opt,name=coupon_period,json=couponPeriod,proto3" json:"coupon_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{10}
}

func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coupon.Unmarshal(m, b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return xxx_messageInfo_Coupon.Size(m)
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Coupon) GetCouponDate() *timestamp.Timestamp {
	if m != nil {
		return m.CouponDate
	}
	return nil
}

func (m *Coupon) GetCouponNumber() int64 {
	if m != nil {
		return m.CouponNumber
	}
	return 0
}

func (m *Coupon) GetFixDate() *timestamp.Timestamp {
	if m != nil {
		return m.FixDate
	}
	return nil
}

func (m *Coupon) GetPayOneBond() *MoneyValue {
	if m != nil {
		return m.PayOneBond
	}
	return nil
}

func (m *Coupon) GetCouponType() CouponType {
	if m != nil {
		return m.CouponType
	}
	return CouponType_COUPON_TYPE_UNSPECIFIED
}

func (m *Coupon) GetCouponStartDate() *timestamp.Timestamp {
	if m != nil {
		return m.CouponStartDate
	}
	return nil
}

func (m *Coupon) GetCouponEndDate() *timestamp.Timestamp {
	if m != nil {
		return m.CouponEndDate
	}
	return nil
}

func (m *Coupon) GetCouponPeriod() int32 {
	if m != nil {
		return m.CouponPeriod
	}
	return 0
}

//Данные по валюте.
type CurrencyResponse struct {
	Instrument           *Currency `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CurrencyResponse) Reset()         { *m = CurrencyResponse{} }
func (m *CurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*CurrencyResponse) ProtoMessage()    {}
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{11}
}

func (m *CurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyResponse.Unmarshal(m, b)
}
func (m *CurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyResponse.Marshal(b, m, deterministic)
}
func (m *CurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyResponse.Merge(m, src)
}
func (m *CurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_CurrencyResponse.Size(m)
}
func (m *CurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyResponse proto.InternalMessageInfo

func (m *CurrencyResponse) GetInstrument() *Currency {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Данные по валютам.
type CurrenciesResponse struct {
	Instruments          []*Currency `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CurrenciesResponse) Reset()         { *m = CurrenciesResponse{} }
func (m *CurrenciesResponse) String() string { return proto.CompactTextString(m) }
func (*CurrenciesResponse) ProtoMessage()    {}
func (*CurrenciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{12}
}

func (m *CurrenciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrenciesResponse.Unmarshal(m, b)
}
func (m *CurrenciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrenciesResponse.Marshal(b, m, deterministic)
}
func (m *CurrenciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrenciesResponse.Merge(m, src)
}
func (m *CurrenciesResponse) XXX_Size() int {
	return xxx_messageInfo_CurrenciesResponse.Size(m)
}
func (m *CurrenciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrenciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrenciesResponse proto.InternalMessageInfo

func (m *CurrenciesResponse) GetInstruments() []*Currency {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Данные по фонду.
type EtfResponse struct {
	Instrument           *Etf     `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EtfResponse) Reset()         { *m = EtfResponse{} }
func (m *EtfResponse) String() string { return proto.CompactTextString(m) }
func (*EtfResponse) ProtoMessage()    {}
func (*EtfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{13}
}

func (m *EtfResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EtfResponse.Unmarshal(m, b)
}
func (m *EtfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EtfResponse.Marshal(b, m, deterministic)
}
func (m *EtfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtfResponse.Merge(m, src)
}
func (m *EtfResponse) XXX_Size() int {
	return xxx_messageInfo_EtfResponse.Size(m)
}
func (m *EtfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EtfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EtfResponse proto.InternalMessageInfo

func (m *EtfResponse) GetInstrument() *Etf {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Данные по фондам.
type EtfsResponse struct {
	Instruments          []*Etf   `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EtfsResponse) Reset()         { *m = EtfsResponse{} }
func (m *EtfsResponse) String() string { return proto.CompactTextString(m) }
func (*EtfsResponse) ProtoMessage()    {}
func (*EtfsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{14}
}

func (m *EtfsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EtfsResponse.Unmarshal(m, b)
}
func (m *EtfsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EtfsResponse.Marshal(b, m, deterministic)
}
func (m *EtfsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtfsResponse.Merge(m, src)
}
func (m *EtfsResponse) XXX_Size() int {
	return xxx_messageInfo_EtfsResponse.Size(m)
}
func (m *EtfsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EtfsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EtfsResponse proto.InternalMessageInfo

func (m *EtfsResponse) GetInstruments() []*Etf {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Данные по фьючерсу.
type FutureResponse struct {
	Instrument           *Future  `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FutureResponse) Reset()         { *m = FutureResponse{} }
func (m *FutureResponse) String() string { return proto.CompactTextString(m) }
func (*FutureResponse) ProtoMessage()    {}
func (*FutureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{15}
}

func (m *FutureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FutureResponse.Unmarshal(m, b)
}
func (m *FutureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FutureResponse.Marshal(b, m, deterministic)
}
func (m *FutureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureResponse.Merge(m, src)
}
func (m *FutureResponse) XXX_Size() int {
	return xxx_messageInfo_FutureResponse.Size(m)
}
func (m *FutureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FutureResponse proto.InternalMessageInfo

func (m *FutureResponse) GetInstrument() *Future {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Данные по фьючерсам.
type FuturesResponse struct {
	Instruments          []*Future `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FuturesResponse) Reset()         { *m = FuturesResponse{} }
func (m *FuturesResponse) String() string { return proto.CompactTextString(m) }
func (*FuturesResponse) ProtoMessage()    {}
func (*FuturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{16}
}

func (m *FuturesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FuturesResponse.Unmarshal(m, b)
}
func (m *FuturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FuturesResponse.Marshal(b, m, deterministic)
}
func (m *FuturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuturesResponse.Merge(m, src)
}
func (m *FuturesResponse) XXX_Size() int {
	return xxx_messageInfo_FuturesResponse.Size(m)
}
func (m *FuturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FuturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FuturesResponse proto.InternalMessageInfo

func (m *FuturesResponse) GetInstruments() []*Future {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Данные по акции.
type ShareResponse struct {
	Instrument           *Share   `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareResponse) Reset()         { *m = ShareResponse{} }
func (m *ShareResponse) String() string { return proto.CompactTextString(m) }
func (*ShareResponse) ProtoMessage()    {}
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{17}
}

func (m *ShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareResponse.Unmarshal(m, b)
}
func (m *ShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareResponse.Marshal(b, m, deterministic)
}
func (m *ShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareResponse.Merge(m, src)
}
func (m *ShareResponse) XXX_Size() int {
	return xxx_messageInfo_ShareResponse.Size(m)
}
func (m *ShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShareResponse proto.InternalMessageInfo

func (m *ShareResponse) GetInstrument() *Share {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Данные по акциям.
type SharesResponse struct {
	Instruments          []*Share `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharesResponse) Reset()         { *m = SharesResponse{} }
func (m *SharesResponse) String() string { return proto.CompactTextString(m) }
func (*SharesResponse) ProtoMessage()    {}
func (*SharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{18}
}

func (m *SharesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharesResponse.Unmarshal(m, b)
}
func (m *SharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharesResponse.Marshal(b, m, deterministic)
}
func (m *SharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharesResponse.Merge(m, src)
}
func (m *SharesResponse) XXX_Size() int {
	return xxx_messageInfo_SharesResponse.Size(m)
}
func (m *SharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SharesResponse proto.InternalMessageInfo

func (m *SharesResponse) GetInstruments() []*Share {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Объект передачи информации об облигации.
type Bond struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`
	CouponQuantityPerYear int32                 `protobuf:"varint,17,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"`
	MaturityDate          *timestamp.Timestamp  `protobuf:"bytes,18,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	Nominal               *MoneyValue           `protobuf:"bytes,19,opt,name=nominal,proto3" json:"nominal,omitempty"`
	StateRegDate          *timestamp.Timestamp  `protobuf:"bytes,21,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`
	PlacementDate         *timestamp.Timestamp  `protobuf:"bytes,22,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	PlacementPrice        *MoneyValue           `protobuf:"bytes,23,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`
	AciValue              *MoneyValue           `protobuf:"bytes,24,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,25,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,26,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	Sector                string                `protobuf:"bytes,27,opt,name=sector,proto3" json:"sector,omitempty"`
	IssueKind             string                `protobuf:"bytes,28,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`
	IssueSize             int64                 `protobuf:"varint,29,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`
	IssueSizePlan         int64                 `protobuf:"varint,30,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,31,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,32,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,33,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,34,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	FloatingCouponFlag    bool                  `protobuf:"varint,35,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`
	PerpetualFlag         bool                  `protobuf:"varint,36,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`
	AmortizationFlag      bool                  `protobuf:"varint,37,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,38,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,39,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,40,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,41,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Bond) Reset()         { *m = Bond{} }
func (m *Bond) String() string { return proto.CompactTextString(m) }
func (*Bond) ProtoMessage()    {}
func (*Bond) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{19}
}

func (m *Bond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bond.Unmarshal(m, b)
}
func (m *Bond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bond.Marshal(b, m, deterministic)
}
func (m *Bond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bond.Merge(m, src)
}
func (m *Bond) XXX_Size() int {
	return xxx_messageInfo_Bond.Size(m)
}
func (m *Bond) XXX_DiscardUnknown() {
	xxx_messageInfo_Bond.DiscardUnknown(m)
}

var xxx_messageInfo_Bond proto.InternalMessageInfo

func (m *Bond) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Bond) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Bond) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Bond) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *Bond) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Bond) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Bond) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Bond) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Bond) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Bond) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Bond) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Bond) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Bond) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Bond) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bond) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Bond) GetCouponQuantityPerYear() int32 {
	if m != nil {
		return m.CouponQuantityPerYear
	}
	return 0
}

func (m *Bond) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *Bond) GetNominal() *MoneyValue {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *Bond) GetStateRegDate() *timestamp.Timestamp {
	if m != nil {
		return m.StateRegDate
	}
	return nil
}

func (m *Bond) GetPlacementDate() *timestamp.Timestamp {
	if m != nil {
		return m.PlacementDate
	}
	return nil
}

func (m *Bond) GetPlacementPrice() *MoneyValue {
	if m != nil {
		return m.PlacementPrice
	}
	return nil
}

func (m *Bond) GetAciValue() *MoneyValue {
	if m != nil {
		return m.AciValue
	}
	return nil
}

func (m *Bond) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Bond) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Bond) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

func (m *Bond) GetIssueKind() string {
	if m != nil {
		return m.IssueKind
	}
	return ""
}

func (m *Bond) GetIssueSize() int64 {
	if m != nil {
		return m.IssueSize
	}
	return 0
}

func (m *Bond) GetIssueSizePlan() int64 {
	if m != nil {
		return m.IssueSizePlan
	}
	return 0
}

func (m *Bond) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Bond) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Bond) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Bond) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Bond) GetFloatingCouponFlag() bool {
	if m != nil {
		return m.FloatingCouponFlag
	}
	return false
}

func (m *Bond) GetPerpetualFlag() bool {
	if m != nil {
		return m.PerpetualFlag
	}
	return false
}

func (m *Bond) GetAmortizationFlag() bool {
	if m != nil {
		return m.AmortizationFlag
	}
	return false
}

func (m *Bond) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Bond) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Bond) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Bond) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации о валюте.
type Currency struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Nominal               *MoneyValue           `protobuf:"bytes,17,opt,name=nominal,proto3" json:"nominal,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,18,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,19,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,20,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,21,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,22,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,23,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	IsoCurrencyName       string                `protobuf:"bytes,24,opt,name=iso_currency_name,json=isoCurrencyName,proto3" json:"iso_currency_name,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,25,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,26,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,27,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,28,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{20}
}

func (m *Currency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currency.Unmarshal(m, b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
}
func (m *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(m, src)
}
func (m *Currency) XXX_Size() int {
	return xxx_messageInfo_Currency.Size(m)
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Currency) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Currency) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Currency) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *Currency) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Currency) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Currency) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Currency) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Currency) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Currency) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Currency) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Currency) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Currency) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Currency) GetNominal() *MoneyValue {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *Currency) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Currency) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Currency) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Currency) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Currency) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Currency) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Currency) GetIsoCurrencyName() string {
	if m != nil {
		return m.IsoCurrencyName
	}
	return ""
}

func (m *Currency) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Currency) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Currency) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Currency) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации об инвестиционном фонде.
type Etf struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`
	FixedCommission       *Quotation            `protobuf:"bytes,17,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`
	FocusType             string                `protobuf:"bytes,18,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`
	ReleasedDate          *timestamp.Timestamp  `protobuf:"bytes,19,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`
	NumShares             *Quotation            `protobuf:"bytes,20,opt,name=num_shares,json=numShares,proto3" json:"num_shares,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	Sector                string                `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`
	RebalancingFreq       string                `protobuf:"bytes,24,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Etf) Reset()         { *m = Etf{} }
func (m *Etf) String() string { return proto.CompactTextString(m) }
func (*Etf) ProtoMessage()    {}
func (*Etf) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{21}
}

func (m *Etf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Etf.Unmarshal(m, b)
}
func (m *Etf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Etf.Marshal(b, m, deterministic)
}
func (m *Etf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Etf.Merge(m, src)
}
func (m *Etf) XXX_Size() int {
	return xxx_messageInfo_Etf.Size(m)
}
func (m *Etf) XXX_DiscardUnknown() {
	xxx_messageInfo_Etf.DiscardUnknown(m)
}

var xxx_messageInfo_Etf proto.InternalMessageInfo

func (m *Etf) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Etf) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Etf) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Etf) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *Etf) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Etf) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Etf) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Etf) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Etf) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Etf) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Etf) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Etf) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Etf) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Etf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Etf) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Etf) GetFixedCommission() *Quotation {
	if m != nil {
		return m.FixedCommission
	}
	return nil
}

func (m *Etf) GetFocusType() string {
	if m != nil {
		return m.FocusType
	}
	return ""
}

func (m *Etf) GetReleasedDate() *timestamp.Timestamp {
	if m != nil {
		return m.ReleasedDate
	}
	return nil
}

func (m *Etf) GetNumShares() *Quotation {
	if m != nil {
		return m.NumShares
	}
	return nil
}

func (m *Etf) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Etf) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Etf) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

func (m *Etf) GetRebalancingFreq() string {
	if m != nil {
		return m.RebalancingFreq
	}
	return ""
}

func (m *Etf) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Etf) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Etf) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Etf) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Etf) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Etf) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Etf) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Etf) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации о фьючерсе.
type Future struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Lot                   int32                 `protobuf:"varint,4,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,6,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,7,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,8,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,9,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,10,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,11,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,12,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,14,opt,name=exchange,proto3" json:"exchange,omitempty"`
	FirstTradeDate        *timestamp.Timestamp  `protobuf:"bytes,15,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`
	LastTradeDate         *timestamp.Timestamp  `protobuf:"bytes,16,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`
	FuturesType           string                `protobuf:"bytes,17,opt,name=futures_type,json=futuresType,proto3" json:"futures_type,omitempty"`
	AssetType             string                `protobuf:"bytes,18,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	BasicAsset            string                `protobuf:"bytes,19,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`
	BasicAssetSize        *Quotation            `protobuf:"bytes,20,opt,name=basic_asset_size,json=basicAssetSize,proto3" json:"basic_asset_size,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	Sector                string                `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`
	ExpirationDate        *timestamp.Timestamp  `protobuf:"bytes,24,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Future) Reset()         { *m = Future{} }
func (m *Future) String() string { return proto.CompactTextString(m) }
func (*Future) ProtoMessage()    {}
func (*Future) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{22}
}

func (m *Future) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Future.Unmarshal(m, b)
}
func (m *Future) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Future.Marshal(b, m, deterministic)
}
func (m *Future) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Future.Merge(m, src)
}
func (m *Future) XXX_Size() int {
	return xxx_messageInfo_Future.Size(m)
}
func (m *Future) XXX_DiscardUnknown() {
	xxx_messageInfo_Future.DiscardUnknown(m)
}

var xxx_messageInfo_Future proto.InternalMessageInfo

func (m *Future) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Future) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Future) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Future) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Future) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Future) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Future) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Future) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Future) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Future) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Future) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Future) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Future) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Future) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Future) GetFirstTradeDate() *timestamp.Timestamp {
	if m != nil {
		return m.FirstTradeDate
	}
	return nil
}

func (m *Future) GetLastTradeDate() *timestamp.Timestamp {
	if m != nil {
		return m.LastTradeDate
	}
	return nil
}

func (m *Future) GetFuturesType() string {
	if m != nil {
		return m.FuturesType
	}
	return ""
}

func (m *Future) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *Future) GetBasicAsset() string {
	if m != nil {
		return m.BasicAsset
	}
	return ""
}

func (m *Future) GetBasicAssetSize() *Quotation {
	if m != nil {
		return m.BasicAssetSize
	}
	return nil
}

func (m *Future) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Future) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Future) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

func (m *Future) GetExpirationDate() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationDate
	}
	return nil
}

func (m *Future) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Future) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Future) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Future) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Future) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Future) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Future) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Future) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации об акции.
type Share struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`
	IpoDate               *timestamp.Timestamp  `protobuf:"bytes,17,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`
	IssueSize             int64                 `protobuf:"varint,18,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,19,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,20,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	Sector                string                `protobuf:"bytes,21,opt,name=sector,proto3" json:"sector,omitempty"`
	IssueSizePlan         int64                 `protobuf:"varint,22,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`
	Nominal               *MoneyValue           `protobuf:"bytes,23,opt,name=nominal,proto3" json:"nominal,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	DivYieldFlag          bool                  `protobuf:"varint,29,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`
	ShareType             ShareType             `protobuf:"varint,30,opt,name=share_type,json=shareType,proto3,enum=tinkoff.public.invest.api.contract.v1.ShareType" json:"share_type,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,31,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,32,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,33,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,34,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Share) Reset()         { *m = Share{} }
func (m *Share) String() string { return proto.CompactTextString(m) }
func (*Share) ProtoMessage()    {}
func (*Share) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{23}
}

func (m *Share) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Share.Unmarshal(m, b)
}
func (m *Share) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Share.Marshal(b, m, deterministic)
}
func (m *Share) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Share.Merge(m, src)
}
func (m *Share) XXX_Size() int {
	return xxx_messageInfo_Share.Size(m)
}
func (m *Share) XXX_DiscardUnknown() {
	xxx_messageInfo_Share.DiscardUnknown(m)
}

var xxx_messageInfo_Share proto.InternalMessageInfo

func (m *Share) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Share) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Share) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Share) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *Share) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Share) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Share) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Share) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Share) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Share) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Share) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Share) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Share) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Share) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Share) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Share) GetIpoDate() *timestamp.Timestamp {
	if m != nil {
		return m.IpoDate
	}
	return nil
}

func (m *Share) GetIssueSize() int64 {
	if m != nil {
		return m.IssueSize
	}
	return 0
}

func (m *Share) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Share) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Share) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

func (m *Share) GetIssueSizePlan() int64 {
	if m != nil {
		return m.IssueSizePlan
	}
	return 0
}

func (m *Share) GetNominal() *MoneyValue {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *Share) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Share) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Share) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Share) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Share) GetDivYieldFlag() bool {
	if m != nil {
		return m.DivYieldFlag
	}
	return false
}

func (m *Share) GetShareType() ShareType {
	if m != nil {
		return m.ShareType
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (m *Share) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Share) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Share) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Share) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Запрос НКД по облигации
type GetAccruedInterestsRequest struct {
	Figi                 string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	From                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetAccruedInterestsRequest) Reset()         { *m = GetAccruedInterestsRequest{} }
func (m *GetAccruedInterestsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccruedInterestsRequest) ProtoMessage()    {}
func (*GetAccruedInterestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{24}
}

func (m *GetAccruedInterestsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccruedInterestsRequest.Unmarshal(m, b)
}
func (m *GetAccruedInterestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccruedInterestsRequest.Marshal(b, m, deterministic)
}
func (m *GetAccruedInterestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccruedInterestsRequest.Merge(m, src)
}
func (m *GetAccruedInterestsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAccruedInterestsRequest.Size(m)
}
func (m *GetAccruedInterestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccruedInterestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccruedInterestsRequest proto.InternalMessageInfo

func (m *GetAccruedInterestsRequest) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *GetAccruedInterestsRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GetAccruedInterestsRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

//НКД облигации
type GetAccruedInterestsResponse struct {
	AccruedInterests     []*AccruedInterest `protobuf:"bytes,1,rep,name=accrued_interests,json=accruedInterests,proto3" json:"accrued_interests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetAccruedInterestsResponse) Reset()         { *m = GetAccruedInterestsResponse{} }
func (m *GetAccruedInterestsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccruedInterestsResponse) ProtoMessage()    {}
func (*GetAccruedInterestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{25}
}

func (m *GetAccruedInterestsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccruedInterestsResponse.Unmarshal(m, b)
}
func (m *GetAccruedInterestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccruedInterestsResponse.Marshal(b, m, deterministic)
}
func (m *GetAccruedInterestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccruedInterestsResponse.Merge(m, src)
}
func (m *GetAccruedInterestsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAccruedInterestsResponse.Size(m)
}
func (m *GetAccruedInterestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccruedInterestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccruedInterestsResponse proto.InternalMessageInfo

func (m *GetAccruedInterestsResponse) GetAccruedInterests() []*AccruedInterest {
	if m != nil {
		return m.AccruedInterests
	}
	return nil
}

//Операция начисления купонов.
type AccruedInterest struct {
	Date                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value                *Quotation           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValuePercent         *Quotation           `protobuf:"bytes,3,opt,name=value_percent,json=valuePercent,proto3" json:"value_percent,omitempty"`
	Nominal              *Quotation           `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AccruedInterest) Reset()         { *m = AccruedInterest{} }
func (m *AccruedInterest) String() string { return proto.CompactTextString(m) }
func (*AccruedInterest) ProtoMessage()    {}
func (*AccruedInterest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{26}
}

func (m *AccruedInterest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccruedInterest.Unmarshal(m, b)
}
func (m *AccruedInterest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccruedInterest.Marshal(b, m, deterministic)
}
func (m *AccruedInterest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccruedInterest.Merge(m, src)
}
func (m *AccruedInterest) XXX_Size() int {
	return xxx_messageInfo_AccruedInterest.Size(m)
}
func (m *AccruedInterest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccruedInterest.DiscardUnknown(m)
}

var xxx_messageInfo_AccruedInterest proto.InternalMessageInfo

func (m *AccruedInterest) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *AccruedInterest) GetValue() *Quotation {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AccruedInterest) GetValuePercent() *Quotation {
	if m != nil {
		return m.ValuePercent
	}
	return nil
}

func (m *AccruedInterest) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

//Запрос информации о фьючерсе
type GetFuturesMarginRequest struct {
	Figi                 string   `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFuturesMarginRequest) Reset()         { *m = GetFuturesMarginRequest{} }
func (m *GetFuturesMarginRequest) String() string { return proto.CompactTextString(m) }
func (*GetFuturesMarginRequest) ProtoMessage()    {}
func (*GetFuturesMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{27}
}

func (m *GetFuturesMarginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFuturesMarginRequest.Unmarshal(m, b)
}
func (m *GetFuturesMarginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFuturesMarginRequest.Marshal(b, m, deterministic)
}
func (m *GetFuturesMarginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFuturesMarginRequest.Merge(m, src)
}
func (m *GetFuturesMarginRequest) XXX_Size() int {
	return xxx_messageInfo_GetFuturesMarginRequest.Size(m)
}
func (m *GetFuturesMarginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFuturesMarginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFuturesMarginRequest proto.InternalMessageInfo

func (m *GetFuturesMarginRequest) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

//Данные по фьючерсу
type GetFuturesMarginResponse struct {
	InitialMarginOnBuy      *MoneyValue `protobuf:"bytes,1,opt,name=initial_margin_on_buy,json=initialMarginOnBuy,proto3" json:"initial_margin_on_buy,omitempty"`
	InitialMarginOnSell     *MoneyValue `protobuf:"bytes,2,opt,name=initial_margin_on_sell,json=initialMarginOnSell,proto3" json:"initial_margin_on_sell,omitempty"`
	MinPriceIncrement       *Quotation  `protobuf:"bytes,3,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	MinPriceIncrementAmount *Quotation  `protobuf:"bytes,4,opt,name=min_price_increment_amount,json=minPriceIncrementAmount,proto3" json:"min_price_increment_amount,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}    `json:"-"`
	XXX_unrecognized        []byte      `json:"-"`
	XXX_sizecache           int32       `json:"-"`
}

func (m *GetFuturesMarginResponse) Reset()         { *m = GetFuturesMarginResponse{} }
func (m *GetFuturesMarginResponse) String() string { return proto.CompactTextString(m) }
func (*GetFuturesMarginResponse) ProtoMessage()    {}
func (*GetFuturesMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{28}
}

func (m *GetFuturesMarginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFuturesMarginResponse.Unmarshal(m, b)
}
func (m *GetFuturesMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFuturesMarginResponse.Marshal(b, m, deterministic)
}
func (m *GetFuturesMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFuturesMarginResponse.Merge(m, src)
}
func (m *GetFuturesMarginResponse) XXX_Size() int {
	return xxx_messageInfo_GetFuturesMarginResponse.Size(m)
}
func (m *GetFuturesMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFuturesMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFuturesMarginResponse proto.InternalMessageInfo

func (m *GetFuturesMarginResponse) GetInitialMarginOnBuy() *MoneyValue {
	if m != nil {
		return m.InitialMarginOnBuy
	}
	return nil
}

func (m *GetFuturesMarginResponse) GetInitialMarginOnSell() *MoneyValue {
	if m != nil {
		return m.InitialMarginOnSell
	}
	return nil
}

func (m *GetFuturesMarginResponse) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *GetFuturesMarginResponse) GetMinPriceIncrementAmount() *Quotation {
	if m != nil {
		return m.MinPriceIncrementAmount
	}
	return nil
}

//Данные по инструменту.
type InstrumentResponse struct {
	Instrument           *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InstrumentResponse) Reset()         { *m = InstrumentResponse{} }
func (m *InstrumentResponse) String() string { return proto.CompactTextString(m) }
func (*InstrumentResponse) ProtoMessage()    {}
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{29}
}

func (m *InstrumentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentResponse.Unmarshal(m, b)
}
func (m *InstrumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentResponse.Marshal(b, m, deterministic)
}
func (m *InstrumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentResponse.Merge(m, src)
}
func (m *InstrumentResponse) XXX_Size() int {
	return xxx_messageInfo_InstrumentResponse.Size(m)
}
func (m *InstrumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentResponse proto.InternalMessageInfo

func (m *InstrumentResponse) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

//Объект передачи основной информации об инструменте.
type Instrument struct {
	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`
	Name                  string                `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	Exchange              string                `protobuf:"bytes,15,opt,name=exchange,proto3" json:"exchange,omitempty"`
	CountryOfRisk         string                `protobuf:"bytes,16,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName     string                `protobuf:"bytes,17,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	InstrumentType        string                `protobuf:"bytes,18,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`
	TradingStatus         SecurityTradingStatus `protobuf:"varint,19,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"`
	OtcFlag               bool                  `protobuf:"varint,20,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	BuyAvailableFlag      bool                  `protobuf:"varint,21,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`
	SellAvailableFlag     bool                  `protobuf:"varint,22,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`
	MinPriceIncrement     *Quotation            `protobuf:"bytes,23,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	ApiTradeAvailableFlag bool                  `protobuf:"varint,24,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	Uid                   string                `protobuf:"bytes,25,opt,name=uid,proto3" json:"uid,omitempty"`
	RealExchange          RealExchange          `protobuf:"varint,26,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{30}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *Instrument) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Instrument) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *Instrument) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *Instrument) GetLot() int32 {
	if m != nil {
		return m.Lot
	}
	return 0
}

func (m *Instrument) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Instrument) GetKlong() *Quotation {
	if m != nil {
		return m.Klong
	}
	return nil
}

func (m *Instrument) GetKshort() *Quotation {
	if m != nil {
		return m.Kshort
	}
	return nil
}

func (m *Instrument) GetDlong() *Quotation {
	if m != nil {
		return m.Dlong
	}
	return nil
}

func (m *Instrument) GetDshort() *Quotation {
	if m != nil {
		return m.Dshort
	}
	return nil
}

func (m *Instrument) GetDlongMin() *Quotation {
	if m != nil {
		return m.DlongMin
	}
	return nil
}

func (m *Instrument) GetDshortMin() *Quotation {
	if m != nil {
		return m.DshortMin
	}
	return nil
}

func (m *Instrument) GetShortEnabledFlag() bool {
	if m != nil {
		return m.ShortEnabledFlag
	}
	return false
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Instrument) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Instrument) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

func (m *Instrument) GetInstrumentType() string {
	if m != nil {
		return m.InstrumentType
	}
	return ""
}

func (m *Instrument) GetTradingStatus() SecurityTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *Instrument) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *Instrument) GetBuyAvailableFlag() bool {
	if m != nil {
		return m.BuyAvailableFlag
	}
	return false
}

func (m *Instrument) GetSellAvailableFlag() bool {
	if m != nil {
		return m.SellAvailableFlag
	}
	return false
}

func (m *Instrument) GetMinPriceIncrement() *Quotation {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Instrument) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

func (m *Instrument) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Instrument) GetRealExchange() RealExchange {
	if m != nil {
		return m.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Запрос дивидендов.
type GetDividendsRequest struct {
	Figi                 string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	From                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetDividendsRequest) Reset()         { *m = GetDividendsRequest{} }
func (m *GetDividendsRequest) String() string { return proto.CompactTextString(m) }
func (*GetDividendsRequest) ProtoMessage()    {}
func (*GetDividendsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{31}
}

func (m *GetDividendsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDividendsRequest.Unmarshal(m, b)
}
func (m *GetDividendsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDividendsRequest.Marshal(b, m, deterministic)
}
func (m *GetDividendsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDividendsRequest.Merge(m, src)
}
func (m *GetDividendsRequest) XXX_Size() int {
	return xxx_messageInfo_GetDividendsRequest.Size(m)
}
func (m *GetDividendsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDividendsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDividendsRequest proto.InternalMessageInfo

func (m *GetDividendsRequest) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *GetDividendsRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GetDividendsRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

//Дивиденды.
type GetDividendsResponse struct {
	Dividends            []*Dividend `protobuf:"bytes,1,rep,name=dividends,proto3" json:"dividends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDividendsResponse) Reset()         { *m = GetDividendsResponse{} }
func (m *GetDividendsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDividendsResponse) ProtoMessage()    {}
func (*GetDividendsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{32}
}

func (m *GetDividendsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDividendsResponse.Unmarshal(m, b)
}
func (m *GetDividendsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDividendsResponse.Marshal(b, m, deterministic)
}
func (m *GetDividendsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDividendsResponse.Merge(m, src)
}
func (m *GetDividendsResponse) XXX_Size() int {
	return xxx_messageInfo_GetDividendsResponse.Size(m)
}
func (m *GetDividendsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDividendsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDividendsResponse proto.InternalMessageInfo

func (m *GetDividendsResponse) GetDividends() []*Dividend {
	if m != nil {
		return m.Dividends
	}
	return nil
}

//Информация о выплате.
type Dividend struct {
	DividendNet          *MoneyValue          `protobuf:"bytes,1,opt,name=dividend_net,json=dividendNet,proto3" json:"dividend_net,omitempty"`
	PaymentDate          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	DeclaredDate         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=declared_date,json=declaredDate,proto3" json:"declared_date,omitempty"`
	LastBuyDate          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_buy_date,json=lastBuyDate,proto3" json:"last_buy_date,omitempty"`
	DividendType         string               `protobuf:"bytes,5,opt,name=dividend_type,json=dividendType,proto3" json:"dividend_type,omitempty"`
	RecordDate           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`
	Regularity           string               `protobuf:"bytes,7,opt,name=regularity,proto3" json:"regularity,omitempty"`
	ClosePrice           *MoneyValue          `protobuf:"bytes,8,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	YieldValue           *Quotation           `protobuf:"bytes,9,opt,name=yield_value,json=yieldValue,proto3" json:"yield_value,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Dividend) Reset()         { *m = Dividend{} }
func (m *Dividend) String() string { return proto.CompactTextString(m) }
func (*Dividend) ProtoMessage()    {}
func (*Dividend) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{33}
}

func (m *Dividend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dividend.Unmarshal(m, b)
}
func (m *Dividend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dividend.Marshal(b, m, deterministic)
}
func (m *Dividend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dividend.Merge(m, src)
}
func (m *Dividend) XXX_Size() int {
	return xxx_messageInfo_Dividend.Size(m)
}
func (m *Dividend) XXX_DiscardUnknown() {
	xxx_messageInfo_Dividend.DiscardUnknown(m)
}

var xxx_messageInfo_Dividend proto.InternalMessageInfo

func (m *Dividend) GetDividendNet() *MoneyValue {
	if m != nil {
		return m.DividendNet
	}
	return nil
}

func (m *Dividend) GetPaymentDate() *timestamp.Timestamp {
	if m != nil {
		return m.PaymentDate
	}
	return nil
}

func (m *Dividend) GetDeclaredDate() *timestamp.Timestamp {
	if m != nil {
		return m.DeclaredDate
	}
	return nil
}

func (m *Dividend) GetLastBuyDate() *timestamp.Timestamp {
	if m != nil {
		return m.LastBuyDate
	}
	return nil
}

func (m *Dividend) GetDividendType() string {
	if m != nil {
		return m.DividendType
	}
	return ""
}

func (m *Dividend) GetRecordDate() *timestamp.Timestamp {
	if m != nil {
		return m.RecordDate
	}
	return nil
}

func (m *Dividend) GetRegularity() string {
	if m != nil {
		return m.Regularity
	}
	return ""
}

func (m *Dividend) GetClosePrice() *MoneyValue {
	if m != nil {
		return m.ClosePrice
	}
	return nil
}

func (m *Dividend) GetYieldValue() *Quotation {
	if m != nil {
		return m.YieldValue
	}
	return nil
}

func (m *Dividend) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

//Запрос актива по идентификатору.
type AssetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetRequest) Reset()         { *m = AssetRequest{} }
func (m *AssetRequest) String() string { return proto.CompactTextString(m) }
func (*AssetRequest) ProtoMessage()    {}
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{34}
}

func (m *AssetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetRequest.Unmarshal(m, b)
}
func (m *AssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetRequest.Marshal(b, m, deterministic)
}
func (m *AssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetRequest.Merge(m, src)
}
func (m *AssetRequest) XXX_Size() int {
	return xxx_messageInfo_AssetRequest.Size(m)
}
func (m *AssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetRequest proto.InternalMessageInfo

func (m *AssetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//Данные по активу.
type AssetResponse struct {
	Asset                *AssetFull `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AssetResponse) Reset()         { *m = AssetResponse{} }
func (m *AssetResponse) String() string { return proto.CompactTextString(m) }
func (*AssetResponse) ProtoMessage()    {}
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{35}
}

func (m *AssetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetResponse.Unmarshal(m, b)
}
func (m *AssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetResponse.Marshal(b, m, deterministic)
}
func (m *AssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetResponse.Merge(m, src)
}
func (m *AssetResponse) XXX_Size() int {
	return xxx_messageInfo_AssetResponse.Size(m)
}
func (m *AssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetResponse proto.InternalMessageInfo

func (m *AssetResponse) GetAsset() *AssetFull {
	if m != nil {
		return m.Asset
	}
	return nil
}

//Запрос списка активов.
type AssetsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetsRequest) Reset()         { *m = AssetsRequest{} }
func (m *AssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AssetsRequest) ProtoMessage()    {}
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{36}
}

func (m *AssetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetsRequest.Unmarshal(m, b)
}
func (m *AssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetsRequest.Marshal(b, m, deterministic)
}
func (m *AssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsRequest.Merge(m, src)
}
func (m *AssetsRequest) XXX_Size() int {
	return xxx_messageInfo_AssetsRequest.Size(m)
}
func (m *AssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsRequest proto.InternalMessageInfo

//Список активов.
type AssetsResponse struct {
	Assets               []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetsResponse) Reset()         { *m = AssetsResponse{} }
func (m *AssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AssetsResponse) ProtoMessage()    {}
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{37}
}

func (m *AssetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetsResponse.Unmarshal(m, b)
}
func (m *AssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetsResponse.Marshal(b, m, deterministic)
}
func (m *AssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsResponse.Merge(m, src)
}
func (m *AssetsResponse) XXX_Size() int {
	return xxx_messageInfo_AssetsResponse.Size(m)
}
func (m *AssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsResponse proto.InternalMessageInfo

func (m *AssetsResponse) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type AssetFull struct {
	Uid           string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type          AssetType            `protobuf:"varint,2,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"type,omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameBrief     string               `protobuf:"bytes,4,opt,name=name_brief,json=nameBrief,proto3" json:"name_brief,omitempty"`
	Description   string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DeletedAt     *timestamp.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	RequiredTests []string             `protobuf:"bytes,7,rep,name=required_tests,json=requiredTests,proto3" json:"required_tests,omitempty"`
	// Types that are valid to be assigned to Ext:
	//	*AssetFull_Currency
	//	*AssetFull_Security
	Ext                  isAssetFull_Ext      `protobuf_oneof:"ext"`
	GosRegCode           string               `protobuf:"bytes,10,opt,name=gos_reg_code,json=gosRegCode,proto3" json:"gos_reg_code,omitempty"`
	Cfi                  string               `protobuf:"bytes,11,opt,name=cfi,proto3" json:"cfi,omitempty"`
	CodeNsd              string               `protobuf:"bytes,12,opt,name=code_nsd,json=codeNsd,proto3" json:"code_nsd,omitempty"`
	Status               string               `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	Brand                *Brand               `protobuf:"bytes,14,opt,name=brand,proto3" json:"brand,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	BrCode               string               `protobuf:"bytes,16,opt,name=br_code,json=brCode,proto3" json:"br_code,omitempty"`
	BrCodeName           string               `protobuf:"bytes,17,opt,name=br_code_name,json=brCodeName,proto3" json:"br_code_name,omitempty"`
	Instruments          []*AssetInstrument   `protobuf:"bytes,18,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AssetFull) Reset()         { *m = AssetFull{} }
func (m *AssetFull) String() string { return proto.CompactTextString(m) }
func (*AssetFull) ProtoMessage()    {}
func (*AssetFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{38}
}

func (m *AssetFull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetFull.Unmarshal(m, b)
}
func (m *AssetFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetFull.Marshal(b, m, deterministic)
}
func (m *AssetFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetFull.Merge(m, src)
}
func (m *AssetFull) XXX_Size() int {
	return xxx_messageInfo_AssetFull.Size(m)
}
func (m *AssetFull) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetFull.DiscardUnknown(m)
}

var xxx_messageInfo_AssetFull proto.InternalMessageInfo

func (m *AssetFull) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AssetFull) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *AssetFull) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetFull) GetNameBrief() string {
	if m != nil {
		return m.NameBrief
	}
	return ""
}

func (m *AssetFull) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AssetFull) GetDeletedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *AssetFull) GetRequiredTests() []string {
	if m != nil {
		return m.RequiredTests
	}
	return nil
}

type isAssetFull_Ext interface {
	isAssetFull_Ext()
}

type AssetFull_Currency struct {
	Currency *AssetCurrency `protobuf:"bytes,8,opt,name=currency,proto3,oneof"`
}

type AssetFull_Security struct {
	Security *AssetSecurity `protobuf:"bytes,9,opt,name=security,proto3,oneof"`
}

func (*AssetFull_Currency) isAssetFull_Ext() {}

func (*AssetFull_Security) isAssetFull_Ext() {}

func (m *AssetFull) GetExt() isAssetFull_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *AssetFull) GetCurrency() *AssetCurrency {
	if x, ok := m.GetExt().(*AssetFull_Currency); ok {
		return x.Currency
	}
	return nil
}

func (m *AssetFull) GetSecurity() *AssetSecurity {
	if x, ok := m.GetExt().(*AssetFull_Security); ok {
		return x.Security
	}
	return nil
}

func (m *AssetFull) GetGosRegCode() string {
	if m != nil {
		return m.GosRegCode
	}
	return ""
}

func (m *AssetFull) GetCfi() string {
	if m != nil {
		return m.Cfi
	}
	return ""
}

func (m *AssetFull) GetCodeNsd() string {
	if m != nil {
		return m.CodeNsd
	}
	return ""
}

func (m *AssetFull) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AssetFull) GetBrand() *Brand {
	if m != nil {
		return m.Brand
	}
	return nil
}

func (m *AssetFull) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *AssetFull) GetBrCode() string {
	if m != nil {
		return m.BrCode
	}
	return ""
}

func (m *AssetFull) GetBrCodeName() string {
	if m != nil {
		return m.BrCodeName
	}
	return ""
}

func (m *AssetFull) GetInstruments() []*AssetInstrument {
	if m != nil {
		return m.Instruments
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AssetFull) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AssetFull_Currency)(nil),
		(*AssetFull_Security)(nil),
	}
}

//Информация об активе.
type Asset struct {
	Uid                  string             `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type                 AssetType          `protobuf:"varint,2,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"type,omitempty"`
	Name                 string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Instruments          []*AssetInstrument `protobuf:"bytes,4,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{39}
}

func (m *Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Asset.Unmarshal(m, b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return xxx_messageInfo_Asset.Size(m)
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Asset) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *Asset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Asset) GetInstruments() []*AssetInstrument {
	if m != nil {
		return m.Instruments
	}
	return nil
}

//Валюта.
type AssetCurrency struct {
	BaseCurrency         string   `protobuf:"bytes,1,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetCurrency) Reset()         { *m = AssetCurrency{} }
func (m *AssetCurrency) String() string { return proto.CompactTextString(m) }
func (*AssetCurrency) ProtoMessage()    {}
func (*AssetCurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{40}
}

func (m *AssetCurrency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetCurrency.Unmarshal(m, b)
}
func (m *AssetCurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetCurrency.Marshal(b, m, deterministic)
}
func (m *AssetCurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetCurrency.Merge(m, src)
}
func (m *AssetCurrency) XXX_Size() int {
	return xxx_messageInfo_AssetCurrency.Size(m)
}
func (m *AssetCurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetCurrency.DiscardUnknown(m)
}

var xxx_messageInfo_AssetCurrency proto.InternalMessageInfo

func (m *AssetCurrency) GetBaseCurrency() string {
	if m != nil {
		return m.BaseCurrency
	}
	return ""
}

//Ценная бумага.
type AssetSecurity struct {
	Isin string `protobuf:"bytes,1,opt,name=isin,proto3" json:"isin,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Ext:
	//	*AssetSecurity_Share
	//	*AssetSecurity_Bond
	//	*AssetSecurity_Sp
	//	*AssetSecurity_Etf
	//	*AssetSecurity_ClearingCertificate
	Ext                  isAssetSecurity_Ext `protobuf_oneof:"ext"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AssetSecurity) Reset()         { *m = AssetSecurity{} }
func (m *AssetSecurity) String() string { return proto.CompactTextString(m) }
func (*AssetSecurity) ProtoMessage()    {}
func (*AssetSecurity) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{41}
}

func (m *AssetSecurity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetSecurity.Unmarshal(m, b)
}
func (m *AssetSecurity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetSecurity.Marshal(b, m, deterministic)
}
func (m *AssetSecurity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetSecurity.Merge(m, src)
}
func (m *AssetSecurity) XXX_Size() int {
	return xxx_messageInfo_AssetSecurity.Size(m)
}
func (m *AssetSecurity) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetSecurity.DiscardUnknown(m)
}

var xxx_messageInfo_AssetSecurity proto.InternalMessageInfo

func (m *AssetSecurity) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *AssetSecurity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type isAssetSecurity_Ext interface {
	isAssetSecurity_Ext()
}

type AssetSecurity_Share struct {
	Share *AssetShare `protobuf:"bytes,3,opt,name=share,proto3,oneof"`
}

type AssetSecurity_Bond struct {
	Bond *AssetBond `protobuf:"bytes,4,opt,name=bond,proto3,oneof"`
}

type AssetSecurity_Sp struct {
	Sp *AssetStructuredProduct `protobuf:"bytes,5,opt,name=sp,proto3,oneof"`
}

type AssetSecurity_Etf struct {
	Etf *AssetEtf `protobuf:"bytes,6,opt,name=etf,proto3,oneof"`
}

type AssetSecurity_ClearingCertificate struct {
	ClearingCertificate *AssetClearingCertificate `protobuf:"bytes,7,opt,name=clearing_certificate,json=clearingCertificate,proto3,oneof"`
}

func (*AssetSecurity_Share) isAssetSecurity_Ext() {}

func (*AssetSecurity_Bond) isAssetSecurity_Ext() {}

func (*AssetSecurity_Sp) isAssetSecurity_Ext() {}

func (*AssetSecurity_Etf) isAssetSecurity_Ext() {}

func (*AssetSecurity_ClearingCertificate) isAssetSecurity_Ext() {}

func (m *AssetSecurity) GetExt() isAssetSecurity_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *AssetSecurity) GetShare() *AssetShare {
	if x, ok := m.GetExt().(*AssetSecurity_Share); ok {
		return x.Share
	}
	return nil
}

func (m *AssetSecurity) GetBond() *AssetBond {
	if x, ok := m.GetExt().(*AssetSecurity_Bond); ok {
		return x.Bond
	}
	return nil
}

func (m *AssetSecurity) GetSp() *AssetStructuredProduct {
	if x, ok := m.GetExt().(*AssetSecurity_Sp); ok {
		return x.Sp
	}
	return nil
}

func (m *AssetSecurity) GetEtf() *AssetEtf {
	if x, ok := m.GetExt().(*AssetSecurity_Etf); ok {
		return x.Etf
	}
	return nil
}

func (m *AssetSecurity) GetClearingCertificate() *AssetClearingCertificate {
	if x, ok := m.GetExt().(*AssetSecurity_ClearingCertificate); ok {
		return x.ClearingCertificate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AssetSecurity) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AssetSecurity_Share)(nil),
		(*AssetSecurity_Bond)(nil),
		(*AssetSecurity_Sp)(nil),
		(*AssetSecurity_Etf)(nil),
		(*AssetSecurity_ClearingCertificate)(nil),
	}
}

//Акция.
type AssetShare struct {
	Type                 ShareType            `protobuf:"varint,1,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.ShareType" json:"type,omitempty"`
	IssueSize            *Quotation           `protobuf:"bytes,2,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`
	Nominal              *Quotation           `protobuf:"bytes,3,opt,name=nominal,proto3" json:"nominal,omitempty"`
	NominalCurrency      string               `protobuf:"bytes,4,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`
	PrimaryIndex         string               `protobuf:"bytes,5,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`
	DividendRate         *Quotation           `protobuf:"bytes,6,opt,name=dividend_rate,json=dividendRate,proto3" json:"dividend_rate,omitempty"`
	PreferredShareType   string               `protobuf:"bytes,7,opt,name=preferred_share_type,json=preferredShareType,proto3" json:"preferred_share_type,omitempty"`
	IpoDate              *timestamp.Timestamp `protobuf:"bytes,8,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`
	RegistryDate         *timestamp.Timestamp `protobuf:"bytes,9,opt,name=registry_date,json=registryDate,proto3" json:"registry_date,omitempty"`
	DivYieldFlag         bool                 `protobuf:"varint,10,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`
	IssueKind            string               `protobuf:"bytes,11,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`
	PlacementDate        *timestamp.Timestamp `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	RepresIsin           string               `protobuf:"bytes,13,opt,name=repres_isin,json=represIsin,proto3" json:"repres_isin,omitempty"`
	IssueSizePlan        *Quotation           `protobuf:"bytes,14,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`
	TotalFloat           *Quotation           `protobuf:"bytes,15,opt,name=total_float,json=totalFloat,proto3" json:"total_float,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AssetShare) Reset()         { *m = AssetShare{} }
func (m *AssetShare) String() string { return proto.CompactTextString(m) }
func (*AssetShare) ProtoMessage()    {}
func (*AssetShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{42}
}

func (m *AssetShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetShare.Unmarshal(m, b)
}
func (m *AssetShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetShare.Marshal(b, m, deterministic)
}
func (m *AssetShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetShare.Merge(m, src)
}
func (m *AssetShare) XXX_Size() int {
	return xxx_messageInfo_AssetShare.Size(m)
}
func (m *AssetShare) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetShare.DiscardUnknown(m)
}

var xxx_messageInfo_AssetShare proto.InternalMessageInfo

func (m *AssetShare) GetType() ShareType {
	if m != nil {
		return m.Type
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (m *AssetShare) GetIssueSize() *Quotation {
	if m != nil {
		return m.IssueSize
	}
	return nil
}

func (m *AssetShare) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *AssetShare) GetNominalCurrency() string {
	if m != nil {
		return m.NominalCurrency
	}
	return ""
}

func (m *AssetShare) GetPrimaryIndex() string {
	if m != nil {
		return m.PrimaryIndex
	}
	return ""
}

func (m *AssetShare) GetDividendRate() *Quotation {
	if m != nil {
		return m.DividendRate
	}
	return nil
}

func (m *AssetShare) GetPreferredShareType() string {
	if m != nil {
		return m.PreferredShareType
	}
	return ""
}

func (m *AssetShare) GetIpoDate() *timestamp.Timestamp {
	if m != nil {
		return m.IpoDate
	}
	return nil
}

func (m *AssetShare) GetRegistryDate() *timestamp.Timestamp {
	if m != nil {
		return m.RegistryDate
	}
	return nil
}

func (m *AssetShare) GetDivYieldFlag() bool {
	if m != nil {
		return m.DivYieldFlag
	}
	return false
}

func (m *AssetShare) GetIssueKind() string {
	if m != nil {
		return m.IssueKind
	}
	return ""
}

func (m *AssetShare) GetPlacementDate() *timestamp.Timestamp {
	if m != nil {
		return m.PlacementDate
	}
	return nil
}

func (m *AssetShare) GetRepresIsin() string {
	if m != nil {
		return m.RepresIsin
	}
	return ""
}

func (m *AssetShare) GetIssueSizePlan() *Quotation {
	if m != nil {
		return m.IssueSizePlan
	}
	return nil
}

func (m *AssetShare) GetTotalFloat() *Quotation {
	if m != nil {
		return m.TotalFloat
	}
	return nil
}

//Облигация.
type AssetBond struct {
	CurrentNominal        *Quotation           `protobuf:"bytes,1,opt,name=current_nominal,json=currentNominal,proto3" json:"current_nominal,omitempty"`
	BorrowName            string               `protobuf:"bytes,2,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`
	IssueSize             *Quotation           `protobuf:"bytes,3,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`
	Nominal               *Quotation           `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`
	NominalCurrency       string               `protobuf:"bytes,5,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`
	IssueKind             string               `protobuf:"bytes,6,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`
	InterestKind          string               `protobuf:"bytes,7,opt,name=interest_kind,json=interestKind,proto3" json:"interest_kind,omitempty"`
	CouponQuantityPerYear int32                `protobuf:"varint,8,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"`
	IndexedNominalFlag    bool                 `protobuf:"varint,9,opt,name=indexed_nominal_flag,json=indexedNominalFlag,proto3" json:"indexed_nominal_flag,omitempty"`
	SubordinatedFlag      bool                 `protobuf:"varint,10,opt,name=subordinated_flag,json=subordinatedFlag,proto3" json:"subordinated_flag,omitempty"`
	CollateralFlag        bool                 `protobuf:"varint,11,opt,name=collateral_flag,json=collateralFlag,proto3" json:"collateral_flag,omitempty"`
	TaxFreeFlag           bool                 `protobuf:"varint,12,opt,name=tax_free_flag,json=taxFreeFlag,proto3" json:"tax_free_flag,omitempty"`
	AmortizationFlag      bool                 `protobuf:"varint,13,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`
	FloatingCouponFlag    bool                 `protobuf:"varint,14,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`
	PerpetualFlag         bool                 `protobuf:"varint,15,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`
	MaturityDate          *timestamp.Timestamp `protobuf:"bytes,16,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	ReturnCondition       string               `protobuf:"bytes,17,opt,name=return_condition,json=returnCondition,proto3" json:"return_condition,omitempty"`
	StateRegDate          *timestamp.Timestamp `protobuf:"bytes,18,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`
	PlacementDate         *timestamp.Timestamp `protobuf:"bytes,19,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	PlacementPrice        *Quotation           `protobuf:"bytes,20,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`
	IssueSizePlan         *Quotation           `protobuf:"bytes,21,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *AssetBond) Reset()         { *m = AssetBond{} }
func (m *AssetBond) String() string { return proto.CompactTextString(m) }
func (*AssetBond) ProtoMessage()    {}
func (*AssetBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{43}
}

func (m *AssetBond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetBond.Unmarshal(m, b)
}
func (m *AssetBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetBond.Marshal(b, m, deterministic)
}
func (m *AssetBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetBond.Merge(m, src)
}
func (m *AssetBond) XXX_Size() int {
	return xxx_messageInfo_AssetBond.Size(m)
}
func (m *AssetBond) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetBond.DiscardUnknown(m)
}

var xxx_messageInfo_AssetBond proto.InternalMessageInfo

func (m *AssetBond) GetCurrentNominal() *Quotation {
	if m != nil {
		return m.CurrentNominal
	}
	return nil
}

func (m *AssetBond) GetBorrowName() string {
	if m != nil {
		return m.BorrowName
	}
	return ""
}

func (m *AssetBond) GetIssueSize() *Quotation {
	if m != nil {
		return m.IssueSize
	}
	return nil
}

func (m *AssetBond) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *AssetBond) GetNominalCurrency() string {
	if m != nil {
		return m.NominalCurrency
	}
	return ""
}

func (m *AssetBond) GetIssueKind() string {
	if m != nil {
		return m.IssueKind
	}
	return ""
}

func (m *AssetBond) GetInterestKind() string {
	if m != nil {
		return m.InterestKind
	}
	return ""
}

func (m *AssetBond) GetCouponQuantityPerYear() int32 {
	if m != nil {
		return m.CouponQuantityPerYear
	}
	return 0
}

func (m *AssetBond) GetIndexedNominalFlag() bool {
	if m != nil {
		return m.IndexedNominalFlag
	}
	return false
}

func (m *AssetBond) GetSubordinatedFlag() bool {
	if m != nil {
		return m.SubordinatedFlag
	}
	return false
}

func (m *AssetBond) GetCollateralFlag() bool {
	if m != nil {
		return m.CollateralFlag
	}
	return false
}

func (m *AssetBond) GetTaxFreeFlag() bool {
	if m != nil {
		return m.TaxFreeFlag
	}
	return false
}

func (m *AssetBond) GetAmortizationFlag() bool {
	if m != nil {
		return m.AmortizationFlag
	}
	return false
}

func (m *AssetBond) GetFloatingCouponFlag() bool {
	if m != nil {
		return m.FloatingCouponFlag
	}
	return false
}

func (m *AssetBond) GetPerpetualFlag() bool {
	if m != nil {
		return m.PerpetualFlag
	}
	return false
}

func (m *AssetBond) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *AssetBond) GetReturnCondition() string {
	if m != nil {
		return m.ReturnCondition
	}
	return ""
}

func (m *AssetBond) GetStateRegDate() *timestamp.Timestamp {
	if m != nil {
		return m.StateRegDate
	}
	return nil
}

func (m *AssetBond) GetPlacementDate() *timestamp.Timestamp {
	if m != nil {
		return m.PlacementDate
	}
	return nil
}

func (m *AssetBond) GetPlacementPrice() *Quotation {
	if m != nil {
		return m.PlacementPrice
	}
	return nil
}

func (m *AssetBond) GetIssueSizePlan() *Quotation {
	if m != nil {
		return m.IssueSizePlan
	}
	return nil
}

//Структурная нота.
type AssetStructuredProduct struct {
	BorrowName           string                `protobuf:"bytes,1,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`
	Nominal              *Quotation            `protobuf:"bytes,2,opt,name=nominal,proto3" json:"nominal,omitempty"`
	NominalCurrency      string                `protobuf:"bytes,3,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`
	Type                 StructuredProductType `protobuf:"varint,4,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.StructuredProductType" json:"type,omitempty"`
	LogicPortfolio       string                `protobuf:"bytes,5,opt,name=logic_portfolio,json=logicPortfolio,proto3" json:"logic_portfolio,omitempty"`
	AssetType            AssetType             `protobuf:"varint,6,opt,name=asset_type,json=assetType,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"asset_type,omitempty"`
	BasicAsset           string                `protobuf:"bytes,7,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`
	SafetyBarrier        *Quotation            `protobuf:"bytes,8,opt,name=safety_barrier,json=safetyBarrier,proto3" json:"safety_barrier,omitempty"`
	MaturityDate         *timestamp.Timestamp  `protobuf:"bytes,9,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	IssueSizePlan        *Quotation            `protobuf:"bytes,10,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`
	IssueSize            *Quotation            `protobuf:"bytes,11,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`
	PlacementDate        *timestamp.Timestamp  `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	IssueKind            string                `protobuf:"bytes,13,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AssetStructuredProduct) Reset()         { *m = AssetStructuredProduct{} }
func (m *AssetStructuredProduct) String() string { return proto.CompactTextString(m) }
func (*AssetStructuredProduct) ProtoMessage()    {}
func (*AssetStructuredProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{44}
}

func (m *AssetStructuredProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetStructuredProduct.Unmarshal(m, b)
}
func (m *AssetStructuredProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetStructuredProduct.Marshal(b, m, deterministic)
}
func (m *AssetStructuredProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetStructuredProduct.Merge(m, src)
}
func (m *AssetStructuredProduct) XXX_Size() int {
	return xxx_messageInfo_AssetStructuredProduct.Size(m)
}
func (m *AssetStructuredProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetStructuredProduct.DiscardUnknown(m)
}

var xxx_messageInfo_AssetStructuredProduct proto.InternalMessageInfo

func (m *AssetStructuredProduct) GetBorrowName() string {
	if m != nil {
		return m.BorrowName
	}
	return ""
}

func (m *AssetStructuredProduct) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *AssetStructuredProduct) GetNominalCurrency() string {
	if m != nil {
		return m.NominalCurrency
	}
	return ""
}

func (m *AssetStructuredProduct) GetType() StructuredProductType {
	if m != nil {
		return m.Type
	}
	return StructuredProductType_SP_TYPE_UNSPECIFIED
}

func (m *AssetStructuredProduct) GetLogicPortfolio() string {
	if m != nil {
		return m.LogicPortfolio
	}
	return ""
}

func (m *AssetStructuredProduct) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *AssetStructuredProduct) GetBasicAsset() string {
	if m != nil {
		return m.BasicAsset
	}
	return ""
}

func (m *AssetStructuredProduct) GetSafetyBarrier() *Quotation {
	if m != nil {
		return m.SafetyBarrier
	}
	return nil
}

func (m *AssetStructuredProduct) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *AssetStructuredProduct) GetIssueSizePlan() *Quotation {
	if m != nil {
		return m.IssueSizePlan
	}
	return nil
}

func (m *AssetStructuredProduct) GetIssueSize() *Quotation {
	if m != nil {
		return m.IssueSize
	}
	return nil
}

func (m *AssetStructuredProduct) GetPlacementDate() *timestamp.Timestamp {
	if m != nil {
		return m.PlacementDate
	}
	return nil
}

func (m *AssetStructuredProduct) GetIssueKind() string {
	if m != nil {
		return m.IssueKind
	}
	return ""
}

//Фонд.
type AssetEtf struct {
	TotalExpense              *Quotation             `protobuf:"bytes,1,opt,name=total_expense,json=totalExpense,proto3" json:"total_expense,omitempty"`
	HurdleRate                *Quotation             `protobuf:"bytes,2,opt,name=hurdle_rate,json=hurdleRate,proto3" json:"hurdle_rate,omitempty"`
	PerformanceFee            *Quotation             `protobuf:"bytes,3,opt,name=performance_fee,json=performanceFee,proto3" json:"performance_fee,omitempty"`
	FixedCommission           *Quotation             `protobuf:"bytes,4,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`
	PaymentType               string                 `protobuf:"bytes,5,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	WatermarkFlag             bool                   `protobuf:"varint,6,opt,name=watermark_flag,json=watermarkFlag,proto3" json:"watermark_flag,omitempty"`
	BuyPremium                *Quotation             `protobuf:"bytes,7,opt,name=buy_premium,json=buyPremium,proto3" json:"buy_premium,omitempty"`
	SellDiscount              *Quotation             `protobuf:"bytes,8,opt,name=sell_discount,json=sellDiscount,proto3" json:"sell_discount,omitempty"`
	RebalancingFlag           bool                   `protobuf:"varint,9,opt,name=rebalancing_flag,json=rebalancingFlag,proto3" json:"rebalancing_flag,omitempty"`
	RebalancingFreq           string                 `protobuf:"bytes,10,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`
	ManagementType            string                 `protobuf:"bytes,11,opt,name=management_type,json=managementType,proto3" json:"management_type,omitempty"`
	PrimaryIndex              string                 `protobuf:"bytes,12,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`
	FocusType                 string                 `protobuf:"bytes,13,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`
	LeveragedFlag             bool                   `protobuf:"varint,14,opt,name=leveraged_flag,json=leveragedFlag,proto3" json:"leveraged_flag,omitempty"`
	NumShare                  *Quotation             `protobuf:"bytes,15,opt,name=num_share,json=numShare,proto3" json:"num_share,omitempty"`
	UcitsFlag                 bool                   `protobuf:"varint,16,opt,name=ucits_flag,json=ucitsFlag,proto3" json:"ucits_flag,omitempty"`
	ReleasedDate              *timestamp.Timestamp   `protobuf:"bytes,17,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`
	Description               string                 `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryIndexDescription   string                 `protobuf:"bytes,19,opt,name=primary_index_description,json=primaryIndexDescription,proto3" json:"primary_index_description,omitempty"`
	PrimaryIndexCompany       string                 `protobuf:"bytes,20,opt,name=primary_index_company,json=primaryIndexCompany,proto3" json:"primary_index_company,omitempty"`
	IndexRecoveryPeriod       *Quotation             `protobuf:"bytes,21,opt,name=index_recovery_period,json=indexRecoveryPeriod,proto3" json:"index_recovery_period,omitempty"`
	InavCode                  string                 `protobuf:"bytes,22,opt,name=inav_code,json=inavCode,proto3" json:"inav_code,omitempty"`
	DivYieldFlag              bool                   `protobuf:"varint,23,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`
	ExpenseCommission         *Quotation             `protobuf:"bytes,24,opt,name=expense_commission,json=expenseCommission,proto3" json:"expense_commission,omitempty"`
	PrimaryIndexTrackingError *Quotation             `protobuf:"bytes,25,opt,name=primary_index_tracking_error,json=primaryIndexTrackingError,proto3" json:"primary_index_tracking_error,omitempty"`
	RebalancingPlan           string                 `protobuf:"bytes,26,opt,name=rebalancing_plan,json=rebalancingPlan,proto3" json:"rebalancing_plan,omitempty"`
	TaxRate                   string                 `protobuf:"bytes,27,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	RebalancingDates          []*timestamp.Timestamp `protobuf:"bytes,28,rep,name=rebalancing_dates,json=rebalancingDates,proto3" json:"rebalancing_dates,omitempty"`
	IssueKind                 string                 `protobuf:"bytes,29,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`
	Nominal                   *Quotation             `protobuf:"bytes,30,opt,name=nominal,proto3" json:"nominal,omitempty"`
	NominalCurrency           string                 `protobuf:"bytes,31,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *AssetEtf) Reset()         { *m = AssetEtf{} }
func (m *AssetEtf) String() string { return proto.CompactTextString(m) }
func (*AssetEtf) ProtoMessage()    {}
func (*AssetEtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{45}
}

func (m *AssetEtf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetEtf.Unmarshal(m, b)
}
func (m *AssetEtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetEtf.Marshal(b, m, deterministic)
}
func (m *AssetEtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetEtf.Merge(m, src)
}
func (m *AssetEtf) XXX_Size() int {
	return xxx_messageInfo_AssetEtf.Size(m)
}
func (m *AssetEtf) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetEtf.DiscardUnknown(m)
}

var xxx_messageInfo_AssetEtf proto.InternalMessageInfo

func (m *AssetEtf) GetTotalExpense() *Quotation {
	if m != nil {
		return m.TotalExpense
	}
	return nil
}

func (m *AssetEtf) GetHurdleRate() *Quotation {
	if m != nil {
		return m.HurdleRate
	}
	return nil
}

func (m *AssetEtf) GetPerformanceFee() *Quotation {
	if m != nil {
		return m.PerformanceFee
	}
	return nil
}

func (m *AssetEtf) GetFixedCommission() *Quotation {
	if m != nil {
		return m.FixedCommission
	}
	return nil
}

func (m *AssetEtf) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *AssetEtf) GetWatermarkFlag() bool {
	if m != nil {
		return m.WatermarkFlag
	}
	return false
}

func (m *AssetEtf) GetBuyPremium() *Quotation {
	if m != nil {
		return m.BuyPremium
	}
	return nil
}

func (m *AssetEtf) GetSellDiscount() *Quotation {
	if m != nil {
		return m.SellDiscount
	}
	return nil
}

func (m *AssetEtf) GetRebalancingFlag() bool {
	if m != nil {
		return m.RebalancingFlag
	}
	return false
}

func (m *AssetEtf) GetRebalancingFreq() string {
	if m != nil {
		return m.RebalancingFreq
	}
	return ""
}

func (m *AssetEtf) GetManagementType() string {
	if m != nil {
		return m.ManagementType
	}
	return ""
}

func (m *AssetEtf) GetPrimaryIndex() string {
	if m != nil {
		return m.PrimaryIndex
	}
	return ""
}

func (m *AssetEtf) GetFocusType() string {
	if m != nil {
		return m.FocusType
	}
	return ""
}

func (m *AssetEtf) GetLeveragedFlag() bool {
	if m != nil {
		return m.LeveragedFlag
	}
	return false
}

func (m *AssetEtf) GetNumShare() *Quotation {
	if m != nil {
		return m.NumShare
	}
	return nil
}

func (m *AssetEtf) GetUcitsFlag() bool {
	if m != nil {
		return m.UcitsFlag
	}
	return false
}

func (m *AssetEtf) GetReleasedDate() *timestamp.Timestamp {
	if m != nil {
		return m.ReleasedDate
	}
	return nil
}

func (m *AssetEtf) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AssetEtf) GetPrimaryIndexDescription() string {
	if m != nil {
		return m.PrimaryIndexDescription
	}
	return ""
}

func (m *AssetEtf) GetPrimaryIndexCompany() string {
	if m != nil {
		return m.PrimaryIndexCompany
	}
	return ""
}

func (m *AssetEtf) GetIndexRecoveryPeriod() *Quotation {
	if m != nil {
		return m.IndexRecoveryPeriod
	}
	return nil
}

func (m *AssetEtf) GetInavCode() string {
	if m != nil {
		return m.InavCode
	}
	return ""
}

func (m *AssetEtf) GetDivYieldFlag() bool {
	if m != nil {
		return m.DivYieldFlag
	}
	return false
}

func (m *AssetEtf) GetExpenseCommission() *Quotation {
	if m != nil {
		return m.ExpenseCommission
	}
	return nil
}

func (m *AssetEtf) GetPrimaryIndexTrackingError() *Quotation {
	if m != nil {
		return m.PrimaryIndexTrackingError
	}
	return nil
}

func (m *AssetEtf) GetRebalancingPlan() string {
	if m != nil {
		return m.RebalancingPlan
	}
	return ""
}

func (m *AssetEtf) GetTaxRate() string {
	if m != nil {
		return m.TaxRate
	}
	return ""
}

func (m *AssetEtf) GetRebalancingDates() []*timestamp.Timestamp {
	if m != nil {
		return m.RebalancingDates
	}
	return nil
}

func (m *AssetEtf) GetIssueKind() string {
	if m != nil {
		return m.IssueKind
	}
	return ""
}

func (m *AssetEtf) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *AssetEtf) GetNominalCurrency() string {
	if m != nil {
		return m.NominalCurrency
	}
	return ""
}

//Клиринговый сертификат участия.
type AssetClearingCertificate struct {
	Nominal              *Quotation `protobuf:"bytes,1,opt,name=nominal,proto3" json:"nominal,omitempty"`
	NominalCurrency      string     `protobuf:"bytes,2,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AssetClearingCertificate) Reset()         { *m = AssetClearingCertificate{} }
func (m *AssetClearingCertificate) String() string { return proto.CompactTextString(m) }
func (*AssetClearingCertificate) ProtoMessage()    {}
func (*AssetClearingCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{46}
}

func (m *AssetClearingCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetClearingCertificate.Unmarshal(m, b)
}
func (m *AssetClearingCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetClearingCertificate.Marshal(b, m, deterministic)
}
func (m *AssetClearingCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetClearingCertificate.Merge(m, src)
}
func (m *AssetClearingCertificate) XXX_Size() int {
	return xxx_messageInfo_AssetClearingCertificate.Size(m)
}
func (m *AssetClearingCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetClearingCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_AssetClearingCertificate proto.InternalMessageInfo

func (m *AssetClearingCertificate) GetNominal() *Quotation {
	if m != nil {
		return m.Nominal
	}
	return nil
}

func (m *AssetClearingCertificate) GetNominalCurrency() string {
	if m != nil {
		return m.NominalCurrency
	}
	return ""
}

//Бренд.
type Brand struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Info                 string   `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Company              string   `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	Sector               string   `protobuf:"bytes,6,opt,name=sector,proto3" json:"sector,omitempty"`
	CountryOfRisk        string   `protobuf:"bytes,7,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`
	CountryOfRiskName    string   `protobuf:"bytes,8,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{47}
}

func (m *Brand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Brand.Unmarshal(m, b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
}
func (m *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(m, src)
}
func (m *Brand) XXX_Size() int {
	return xxx_messageInfo_Brand.Size(m)
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Brand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Brand) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Brand) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Brand) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Brand) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

func (m *Brand) GetCountryOfRisk() string {
	if m != nil {
		return m.CountryOfRisk
	}
	return ""
}

func (m *Brand) GetCountryOfRiskName() string {
	if m != nil {
		return m.CountryOfRiskName
	}
	return ""
}

//Идентификаторы инструмента.
type AssetInstrument struct {
	Uid                  string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Figi                 string            `protobuf:"bytes,2,opt,name=figi,proto3" json:"figi,omitempty"`
	InstrumentType       string            `protobuf:"bytes,3,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`
	Ticker               string            `protobuf:"bytes,4,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode            string            `protobuf:"bytes,5,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Links                []*InstrumentLink `protobuf:"bytes,6,rep,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AssetInstrument) Reset()         { *m = AssetInstrument{} }
func (m *AssetInstrument) String() string { return proto.CompactTextString(m) }
func (*AssetInstrument) ProtoMessage()    {}
func (*AssetInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{48}
}

func (m *AssetInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetInstrument.Unmarshal(m, b)
}
func (m *AssetInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetInstrument.Marshal(b, m, deterministic)
}
func (m *AssetInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetInstrument.Merge(m, src)
}
func (m *AssetInstrument) XXX_Size() int {
	return xxx_messageInfo_AssetInstrument.Size(m)
}
func (m *AssetInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_AssetInstrument proto.InternalMessageInfo

func (m *AssetInstrument) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AssetInstrument) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *AssetInstrument) GetInstrumentType() string {
	if m != nil {
		return m.InstrumentType
	}
	return ""
}

func (m *AssetInstrument) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *AssetInstrument) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *AssetInstrument) GetLinks() []*InstrumentLink {
	if m != nil {
		return m.Links
	}
	return nil
}

//Связь с другим инструментом.
type InstrumentLink struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	InstrumentUid        string   `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentLink) Reset()         { *m = InstrumentLink{} }
func (m *InstrumentLink) String() string { return proto.CompactTextString(m) }
func (*InstrumentLink) ProtoMessage()    {}
func (*InstrumentLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{49}
}

func (m *InstrumentLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentLink.Unmarshal(m, b)
}
func (m *InstrumentLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentLink.Marshal(b, m, deterministic)
}
func (m *InstrumentLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentLink.Merge(m, src)
}
func (m *InstrumentLink) XXX_Size() int {
	return xxx_messageInfo_InstrumentLink.Size(m)
}
func (m *InstrumentLink) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentLink.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentLink proto.InternalMessageInfo

func (m *InstrumentLink) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstrumentLink) GetInstrumentUid() string {
	if m != nil {
		return m.InstrumentUid
	}
	return ""
}

//Запрос избранных инструментов.
type GetFavoritesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFavoritesRequest) Reset()         { *m = GetFavoritesRequest{} }
func (m *GetFavoritesRequest) String() string { return proto.CompactTextString(m) }
func (*GetFavoritesRequest) ProtoMessage()    {}
func (*GetFavoritesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{50}
}

func (m *GetFavoritesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFavoritesRequest.Unmarshal(m, b)
}
func (m *GetFavoritesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFavoritesRequest.Marshal(b, m, deterministic)
}
func (m *GetFavoritesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFavoritesRequest.Merge(m, src)
}
func (m *GetFavoritesRequest) XXX_Size() int {
	return xxx_messageInfo_GetFavoritesRequest.Size(m)
}
func (m *GetFavoritesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFavoritesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFavoritesRequest proto.InternalMessageInfo

//Ответ избранных инструментов.
type GetFavoritesResponse struct {
	FavoriteInstruments  []*FavoriteInstrument `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetFavoritesResponse) Reset()         { *m = GetFavoritesResponse{} }
func (m *GetFavoritesResponse) String() string { return proto.CompactTextString(m) }
func (*GetFavoritesResponse) ProtoMessage()    {}
func (*GetFavoritesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{51}
}

func (m *GetFavoritesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFavoritesResponse.Unmarshal(m, b)
}
func (m *GetFavoritesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFavoritesResponse.Marshal(b, m, deterministic)
}
func (m *GetFavoritesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFavoritesResponse.Merge(m, src)
}
func (m *GetFavoritesResponse) XXX_Size() int {
	return xxx_messageInfo_GetFavoritesResponse.Size(m)
}
func (m *GetFavoritesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFavoritesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFavoritesResponse proto.InternalMessageInfo

func (m *GetFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if m != nil {
		return m.FavoriteInstruments
	}
	return nil
}

//Избранный инструмент.
type FavoriteInstrument struct {
	Figi                  string   `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	Ticker                string   `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ClassCode             string   `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Isin                  string   `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	InstrumentType        string   `protobuf:"bytes,11,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`
	OtcFlag               bool     `protobuf:"varint,16,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`
	ApiTradeAvailableFlag bool     `protobuf:"varint,17,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *FavoriteInstrument) Reset()         { *m = FavoriteInstrument{} }
func (m *FavoriteInstrument) String() string { return proto.CompactTextString(m) }
func (*FavoriteInstrument) ProtoMessage()    {}
func (*FavoriteInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{52}
}

func (m *FavoriteInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FavoriteInstrument.Unmarshal(m, b)
}
func (m *FavoriteInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FavoriteInstrument.Marshal(b, m, deterministic)
}
func (m *FavoriteInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavoriteInstrument.Merge(m, src)
}
func (m *FavoriteInstrument) XXX_Size() int {
	return xxx_messageInfo_FavoriteInstrument.Size(m)
}
func (m *FavoriteInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_FavoriteInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_FavoriteInstrument proto.InternalMessageInfo

func (m *FavoriteInstrument) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

func (m *FavoriteInstrument) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *FavoriteInstrument) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *FavoriteInstrument) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *FavoriteInstrument) GetInstrumentType() string {
	if m != nil {
		return m.InstrumentType
	}
	return ""
}

func (m *FavoriteInstrument) GetOtcFlag() bool {
	if m != nil {
		return m.OtcFlag
	}
	return false
}

func (m *FavoriteInstrument) GetApiTradeAvailableFlag() bool {
	if m != nil {
		return m.ApiTradeAvailableFlag
	}
	return false
}

//Запрос редактирования избранных инструментов.
type EditFavoritesRequest struct {
	Instruments          []*EditFavoritesRequestInstrument `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
	ActionType           EditFavoritesActionType           `protobuf:"varint,6,opt,name=action_type,json=actionType,proto3,enum=tinkoff.public.invest.api.contract.v1.EditFavoritesActionType" json:"action_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *EditFavoritesRequest) Reset()         { *m = EditFavoritesRequest{} }
func (m *EditFavoritesRequest) String() string { return proto.CompactTextString(m) }
func (*EditFavoritesRequest) ProtoMessage()    {}
func (*EditFavoritesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{53}
}

func (m *EditFavoritesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditFavoritesRequest.Unmarshal(m, b)
}
func (m *EditFavoritesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditFavoritesRequest.Marshal(b, m, deterministic)
}
func (m *EditFavoritesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditFavoritesRequest.Merge(m, src)
}
func (m *EditFavoritesRequest) XXX_Size() int {
	return xxx_messageInfo_EditFavoritesRequest.Size(m)
}
func (m *EditFavoritesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditFavoritesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditFavoritesRequest proto.InternalMessageInfo

func (m *EditFavoritesRequest) GetInstruments() []*EditFavoritesRequestInstrument {
	if m != nil {
		return m.Instruments
	}
	return nil
}

func (m *EditFavoritesRequest) GetActionType() EditFavoritesActionType {
	if m != nil {
		return m.ActionType
	}
	return EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED
}

//Избранный инструмент для редактирования.
type EditFavoritesRequestInstrument struct {
	Figi                 string   `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditFavoritesRequestInstrument) Reset()         { *m = EditFavoritesRequestInstrument{} }
func (m *EditFavoritesRequestInstrument) String() string { return proto.CompactTextString(m) }
func (*EditFavoritesRequestInstrument) ProtoMessage()    {}
func (*EditFavoritesRequestInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{54}
}

func (m *EditFavoritesRequestInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditFavoritesRequestInstrument.Unmarshal(m, b)
}
func (m *EditFavoritesRequestInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditFavoritesRequestInstrument.Marshal(b, m, deterministic)
}
func (m *EditFavoritesRequestInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditFavoritesRequestInstrument.Merge(m, src)
}
func (m *EditFavoritesRequestInstrument) XXX_Size() int {
	return xxx_messageInfo_EditFavoritesRequestInstrument.Size(m)
}
func (m *EditFavoritesRequestInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_EditFavoritesRequestInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_EditFavoritesRequestInstrument proto.InternalMessageInfo

func (m *EditFavoritesRequestInstrument) GetFigi() string {
	if m != nil {
		return m.Figi
	}
	return ""
}

//Результат редактирования избранных инструментов.
type EditFavoritesResponse struct {
	FavoriteInstruments  []*FavoriteInstrument `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EditFavoritesResponse) Reset()         { *m = EditFavoritesResponse{} }
func (m *EditFavoritesResponse) String() string { return proto.CompactTextString(m) }
func (*EditFavoritesResponse) ProtoMessage()    {}
func (*EditFavoritesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{55}
}

func (m *EditFavoritesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditFavoritesResponse.Unmarshal(m, b)
}
func (m *EditFavoritesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditFavoritesResponse.Marshal(b, m, deterministic)
}
func (m *EditFavoritesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditFavoritesResponse.Merge(m, src)
}
func (m *EditFavoritesResponse) XXX_Size() int {
	return xxx_messageInfo_EditFavoritesResponse.Size(m)
}
func (m *EditFavoritesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditFavoritesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditFavoritesResponse proto.InternalMessageInfo

func (m *EditFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if m != nil {
		return m.FavoriteInstruments
	}
	return nil
}

func init() {
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.CouponType", CouponType_name, CouponType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.InstrumentIdType", InstrumentIdType_name, InstrumentIdType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.InstrumentStatus", InstrumentStatus_name, InstrumentStatus_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.ShareType", ShareType_name, ShareType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.StructuredProductType", StructuredProductType_name, StructuredProductType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.EditFavoritesActionType", EditFavoritesActionType_name, EditFavoritesActionType_value)
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.RealExchange", RealExchange_name, RealExchange_value)
	proto.RegisterType((*TradingSchedulesRequest)(nil), "tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest")
	proto.RegisterType((*TradingSchedulesResponse)(nil), "tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse")
	proto.RegisterType((*TradingSchedule)(nil), "tinkoff.public.invest.api.contract.v1.TradingSchedule")
	proto.RegisterType((*TradingDay)(nil), "tinkoff.public.invest.api.contract.v1.TradingDay")
	proto.RegisterType((*InstrumentRequest)(nil), "tinkoff.public.invest.api.contract.v1.InstrumentRequest")
	proto.RegisterType((*InstrumentsRequest)(nil), "tinkoff.public.invest.api.contract.v1.InstrumentsRequest")
	proto.RegisterType((*BondResponse)(nil), "tinkoff.public.invest.api.contract.v1.BondResponse")
	proto.RegisterType((*BondsResponse)(nil), "tinkoff.public.invest.api.contract.v1.BondsResponse")
	proto.RegisterType((*GetBondCouponsRequest)(nil), "tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest")
	proto.RegisterType((*GetBondCouponsResponse)(nil), "tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse")
	proto.RegisterType((*Coupon)(nil), "tinkoff.public.invest.api.contract.v1.Coupon")
	proto.RegisterType((*CurrencyResponse)(nil), "tinkoff.public.invest.api.contract.v1.CurrencyResponse")
	proto.RegisterType((*CurrenciesResponse)(nil), "tinkoff.public.invest.api.contract.v1.CurrenciesResponse")
	proto.RegisterType((*EtfResponse)(nil), "tinkoff.public.invest.api.contract.v1.EtfResponse")
	proto.RegisterType((*EtfsResponse)(nil), "tinkoff.public.invest.api.contract.v1.EtfsResponse")
	proto.RegisterType((*FutureResponse)(nil), "tinkoff.public.invest.api.contract.v1.FutureResponse")
	proto.RegisterType((*FuturesResponse)(nil), "tinkoff.public.invest.api.contract.v1.FuturesResponse")
	proto.RegisterType((*ShareResponse)(nil), "tinkoff.public.invest.api.contract.v1.ShareResponse")
	proto.RegisterType((*SharesResponse)(nil), "tinkoff.public.invest.api.contract.v1.SharesResponse")
	proto.RegisterType((*Bond)(nil), "tinkoff.public.invest.api.contract.v1.Bond")
	proto.RegisterType((*Currency)(nil), "tinkoff.public.invest.api.contract.v1.Currency")
	proto.RegisterType((*Etf)(nil), "tinkoff.public.invest.api.contract.v1.Etf")
	proto.RegisterType((*Future)(nil), "tinkoff.public.invest.api.contract.v1.Future")
	proto.RegisterType((*Share)(nil), "tinkoff.public.invest.api.contract.v1.Share")
	proto.RegisterType((*GetAccruedInterestsRequest)(nil), "tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest")
	proto.RegisterType((*GetAccruedInterestsResponse)(nil), "tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse")
	proto.RegisterType((*AccruedInterest)(nil), "tinkoff.public.invest.api.contract.v1.AccruedInterest")
	proto.RegisterType((*GetFuturesMarginRequest)(nil), "tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest")
	proto.RegisterType((*GetFuturesMarginResponse)(nil), "tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse")
	proto.RegisterType((*InstrumentResponse)(nil), "tinkoff.public.invest.api.contract.v1.InstrumentResponse")
	proto.RegisterType((*Instrument)(nil), "tinkoff.public.invest.api.contract.v1.Instrument")
	proto.RegisterType((*GetDividendsRequest)(nil), "tinkoff.public.invest.api.contract.v1.GetDividendsRequest")
	proto.RegisterType((*GetDividendsResponse)(nil), "tinkoff.public.invest.api.contract.v1.GetDividendsResponse")
	proto.RegisterType((*Dividend)(nil), "tinkoff.public.invest.api.contract.v1.Dividend")
	proto.RegisterType((*AssetRequest)(nil), "tinkoff.public.invest.api.contract.v1.AssetRequest")
	proto.RegisterType((*AssetResponse)(nil), "tinkoff.public.invest.api.contract.v1.AssetResponse")
	proto.RegisterType((*AssetsRequest)(nil), "tinkoff.public.invest.api.contract.v1.AssetsRequest")
	proto.RegisterType((*AssetsResponse)(nil), "tinkoff.public.invest.api.contract.v1.AssetsResponse")
	proto.RegisterType((*AssetFull)(nil), "tinkoff.public.invest.api.contract.v1.AssetFull")
	proto.RegisterType((*Asset)(nil), "tinkoff.public.invest.api.contract.v1.Asset")
	proto.RegisterType((*AssetCurrency)(nil), "tinkoff.public.invest.api.contract.v1.AssetCurrency")
	proto.RegisterType((*AssetSecurity)(nil), "tinkoff.public.invest.api.contract.v1.AssetSecurity")
	proto.RegisterType((*AssetShare)(nil), "tinkoff.public.invest.api.contract.v1.AssetShare")
	proto.RegisterType((*AssetBond)(nil), "tinkoff.public.invest.api.contract.v1.AssetBond")
	proto.RegisterType((*AssetStructuredProduct)(nil), "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct")
	proto.RegisterType((*AssetEtf)(nil), "tinkoff.public.invest.api.contract.v1.AssetEtf")
	proto.RegisterType((*AssetClearingCertificate)(nil), "tinkoff.public.invest.api.contract.v1.AssetClearingCertificate")
	proto.RegisterType((*Brand)(nil), "tinkoff.public.invest.api.contract.v1.Brand")
	proto.RegisterType((*AssetInstrument)(nil), "tinkoff.public.invest.api.contract.v1.AssetInstrument")
	proto.RegisterType((*InstrumentLink)(nil), "tinkoff.public.invest.api.contract.v1.InstrumentLink")
	proto.RegisterType((*GetFavoritesRequest)(nil), "tinkoff.public.invest.api.contract.v1.GetFavoritesRequest")
	proto.RegisterType((*GetFavoritesResponse)(nil), "tinkoff.public.invest.api.contract.v1.GetFavoritesResponse")
	proto.RegisterType((*FavoriteInstrument)(nil), "tinkoff.public.invest.api.contract.v1.FavoriteInstrument")
	proto.RegisterType((*EditFavoritesRequest)(nil), "tinkoff.public.invest.api.contract.v1.EditFavoritesRequest")
	proto.RegisterType((*EditFavoritesRequestInstrument)(nil), "tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument")
	proto.RegisterType((*EditFavoritesResponse)(nil), "tinkoff.public.invest.api.contract.v1.EditFavoritesResponse")
}

func init() {
	proto.RegisterFile("instruments.proto", fileDescriptor_c06e1cbfd66e82bd)
}

var fileDescriptor_c06e1cbfd66e82bd = []byte{
	// 5430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0xcd, 0x73, 0xe3, 0xc8,
	0x75, 0xf8, 0xf0, 0x53, 0xe4, 0xe3, 0x87, 0x20, 0xe8, 0x8b, 0xa3, 0xd9, 0xf9, 0x58, 0xae, 0xc7,
	0xbb, 0x1e, 0xdb, 0xda, 0x9d, 0xfd, 0xb0, 0x7f, 0xe3, 0xb5, 0xbd, 0x3f, 0x4a, 0xa4, 0x24, 0xee,
	0x48, 0x94, 0x06, 0xa4, 0xc6, 0x33, 0xb6, 0x13, 0x18, 0x02, 0x9a, 0x5a, 0x94, 0x48, 0x80, 0x03,
	0x80, 0xb2, 0xb8, 0x49, 0x55, 0xaa, 0x5c, 0x76, 0x5c, 0x49, 0xc5, 0x95, 0x72, 0x25, 0x95, 0x53,
	0x4e, 0xae, 0x9c, 0x52, 0xc9, 0x25, 0xb7, 0x9c, 0x93, 0x53, 0xaa, 0x92, 0x6b, 0x4e, 0xa9, 0xca,
	0x21, 0xc9, 0x31, 0xf1, 0x9f, 0x90, 0xea, 0xd7, 0x0d, 0x10, 0x04, 0x41, 0x91, 0xa0, 0x34, 0xe3,
	0x6c, 0x32, 0x27, 0x51, 0xaf, 0xfb, 0xbd, 0x7e, 0xdd, 0xe8, 0xf7, 0xd1, 0xaf, 0xdf, 0x6b, 0x58,
	0xd2, 0x0d, 0xdb, 0xb1, 0xfa, 0x5d, 0x62, 0x38, 0xf6, 0x66, 0xcf, 0x32, 0x1d, 0x53, 0xbc, 0xef,
	0xe8, 0xc6, 0x99, 0xd9, 0x6e, 0x6f, 0xf6, 0xfa, 0x27, 0x1d, 0x5d, 0xdd, 0xd4, 0x8d, 0x73, 0x62,
	0x3b, 0x9b, 0x4a, 0x4f, 0xdf, 0x54, 0x4d, 0xc3, 0xb1, 0x14, 0xd5, 0xd9, 0x3c, 0x7f, 0xb8, 0x71,
	0xf7, 0xd4, 0x34, 0x4f, 0x3b, 0xe4, 0x5d, 0x44, 0x3a, 0xe9, 0xb7, 0xdf, 0x75, 0xf4, 0x2e, 0xb1,
	0x1d, 0xa5, 0xdb, 0x63, 0x74, 0x36, 0xf2, 0xaa, 0xd9, 0xed, 0x9a, 0x06, 0xfb, 0xaf, 0xfc, 0xcb,
	0x18, 0xac, 0xb7, 0x2c, 0x45, 0xd3, 0x8d, 0xd3, 0xa6, 0xfa, 0x19, 0xd1, 0xfa, 0x1d, 0x62, 0x4b,
	0xe4, 0x45, 0x9f, 0xd8, 0x8e, 0xb8, 0x01, 0x19, 0x72, 0xa1, 0x7e, 0xa6, 0x18, 0xa7, 0xa4, 0x14,
	0xbb, 0x17, 0x7b, 0x27, 0x2b, 0x79, 0xff, 0x8b, 0x9b, 0x90, 0x6c, 0x5b, 0x66, 0xb7, 0x14, 0xbf,
	0x17, 0x7b, 0x27, 0xf7, 0xfe, 0xc6, 0x26, 0x1b, 0x75, 0xd3, 0x1d, 0x75, 0xb3, 0xe5, 0x8e, 0x2a,
	0x61, 0x3f, 0xf1, 0x01, 0xc4, 0x1d, 0xb3, 0x94, 0x98, 0xda, 0x3b, 0xee, 0x98, 0xe5, 0x1e, 0x94,
	0xc6, 0x59, 0xb2, 0x7b, 0xa6, 0x61, 0x13, 0xb1, 0x05, 0x59, 0x97, 0x07, 0xbb, 0x14, 0xbb, 0x97,
	0x78, 0x27, 0xf7, 0xfe, 0x37, 0x36, 0x67, 0x5a, 0x99, 0xcd, 0x00, 0x4d, 0x69, 0x48, 0xa8, 0xec,
	0xc0, 0x62, 0xa0, 0xf5, 0xd2, 0xc9, 0xd7, 0x20, 0xa9, 0x29, 0x03, 0xbb, 0x14, 0xc7, 0xf1, 0x1f,
	0x46, 0x1b, 0xbf, 0xaa, 0x0c, 0x24, 0x44, 0x2f, 0xff, 0xcd, 0x02, 0xc0, 0x10, 0x48, 0x97, 0x54,
	0x53, 0x1c, 0x36, 0xda, 0x94, 0x25, 0xa5, 0xfd, 0xc4, 0x2f, 0x41, 0x51, 0xb7, 0x65, 0x87, 0x11,
	0x90, 0x35, 0x65, 0x80, 0x1f, 0x23, 0x23, 0xe5, 0x75, 0xdb, 0x47, 0xf5, 0x11, 0x80, 0xed, 0x28,
	0x96, 0x23, 0xd3, 0x7d, 0x30, 0xc3, 0x07, 0xc8, 0x62, 0x6f, 0xfa, 0xbf, 0xf8, 0x11, 0x64, 0x88,
	0xa1, 0x31, 0xc4, 0xe4, 0x54, 0xc4, 0x05, 0x62, 0x68, 0x88, 0xf6, 0x3d, 0xd8, 0x30, 0x7b, 0xc4,
	0xa0, 0x4c, 0x29, 0x7d, 0xd5, 0xd1, 0x4d, 0x43, 0xf6, 0x71, 0xb0, 0x30, 0x95, 0xd0, 0x3a, 0xc7,
	0xae, 0x30, 0xe4, 0xa6, 0xc7, 0x4f, 0x13, 0x4a, 0x6a, 0xc7, 0xb4, 0xfd, 0x84, 0x3d, 0xfe, 0x32,
	0x53, 0xc9, 0xae, 0x72, 0x5c, 0x4e, 0xb6, 0xc6, 0xb9, 0x6d, 0x43, 0x99, 0x9c, 0x33, 0x6e, 0x2f,
	0xe1, 0x3a, 0x3b, 0x95, 0xfc, 0x1d, 0x4e, 0xe5, 0x70, 0x02, 0xf3, 0x7b, 0x20, 0xba, 0xe3, 0xf8,
	0xe8, 0xc2, 0x54, 0xba, 0x02, 0xc7, 0x1a, 0x52, 0xaa, 0x82, 0x0b, 0x1b, 0x4e, 0x3f, 0x37, 0x95,
	0x4e, 0x91, 0xe3, 0xb8, 0xf3, 0xfe, 0x14, 0x96, 0xd5, 0x0e, 0x51, 0xac, 0x00, 0x43, 0xf9, 0xa9,
	0x84, 0x96, 0x5c, 0xb4, 0x21, 0x47, 0x3b, 0xe0, 0x01, 0x87, 0x2c, 0x15, 0xa6, 0x52, 0x5a, 0x74,
	0x91, 0x5c, 0x9e, 0xf6, 0x61, 0xa5, 0x67, 0x91, 0xae, 0x62, 0x9d, 0x11, 0xc7, 0xcf, 0x54, 0x71,
	0x2a, 0x29, 0xd1, 0xc3, 0x1b, 0x59, 0xf1, 0x21, 0x35, 0x8f, 0xad, 0xc5, 0xe9, 0x2b, 0xee, 0x61,
	0x71, 0xbe, 0x3e, 0x4d, 0x66, 0x52, 0x42, 0xfa, 0xd3, 0x64, 0x26, 0x2d, 0x2c, 0x94, 0xff, 0x34,
	0x06, 0x4b, 0x75, 0x4f, 0x39, 0xbb, 0xaa, 0xf2, 0x08, 0x16, 0x74, 0x4d, 0x76, 0x06, 0x3d, 0x26,
	0xbe, 0xc5, 0xf7, 0xbf, 0x39, 0xa3, 0x52, 0x18, 0x92, 0xaa, 0x6b, 0xad, 0x41, 0x8f, 0x48, 0x69,
	0x1d, 0xff, 0x8a, 0xb7, 0x01, 0xd4, 0x8e, 0x62, 0xdb, 0xb2, 0x6a, 0x6a, 0x04, 0x25, 0x3b, 0x2b,
	0x65, 0x11, 0xb2, 0x6d, 0x6a, 0x44, 0x2c, 0x42, 0x5c, 0xd7, 0x50, 0x9c, 0xb3, 0x52, 0x5c, 0xd7,
	0xca, 0x9f, 0x83, 0x38, 0x24, 0xe5, 0x69, 0x70, 0xcd, 0x6f, 0x48, 0xe8, 0x8a, 0x3a, 0x7d, 0x7b,
	0x6e, 0x06, 0x9b, 0x88, 0x2e, 0x09, 0x7a, 0x00, 0x52, 0xfe, 0x01, 0xe4, 0xb7, 0x4c, 0x43, 0xf3,
	0x74, 0xf4, 0x63, 0x80, 0x61, 0x1f, 0xae, 0xce, 0xbe, 0x3a, 0xe3, 0x70, 0x48, 0xc8, 0x87, 0x5e,
	0xfe, 0x6d, 0x28, 0x50, 0xd8, 0xd0, 0x02, 0x1c, 0x40, 0xce, 0x67, 0x1c, 0xb9, 0x0d, 0x88, 0x44,
	0xde, 0x8f, 0x5f, 0xfe, 0x79, 0x0c, 0x56, 0x77, 0x89, 0x43, 0x1b, 0xb6, 0xcd, 0x3e, 0x1d, 0xc2,
	0x5d, 0x3c, 0x11, 0x92, 0x6d, 0xfd, 0x54, 0xe7, 0xda, 0x1f, 0x7f, 0xbf, 0x54, 0xb3, 0x27, 0xc3,
	0x5a, 0x90, 0x11, 0x3e, 0xe5, 0x1a, 0xa4, 0xa9, 0xf4, 0x7a, 0xb3, 0xfd, 0xfa, 0x8c, 0xb3, 0x65,
	0x74, 0x24, 0x8e, 0x5c, 0xfe, 0xe3, 0x24, 0xa4, 0x19, 0x28, 0x74, 0x6e, 0x1f, 0x43, 0x4e, 0xc5,
	0x56, 0x19, 0xcd, 0xd0, 0xf4, 0x29, 0x02, 0xeb, 0x5e, 0xa5, 0xc6, 0xe8, 0x2d, 0x28, 0x70, 0x64,
	0xa3, 0xdf, 0x3d, 0x21, 0x16, 0xce, 0x39, 0x21, 0xe5, 0x19, 0xb0, 0x81, 0x30, 0x6a, 0x50, 0xda,
	0xfa, 0x05, 0x23, 0x3f, 0x83, 0x41, 0x69, 0xeb, 0x17, 0x48, 0xbb, 0x09, 0xf9, 0x9e, 0x32, 0x90,
	0x4d, 0x83, 0xc8, 0x27, 0xa6, 0xa1, 0x95, 0x52, 0x88, 0x3a, 0xab, 0xd9, 0x3d, 0x30, 0x0d, 0x32,
	0x78, 0xaa, 0x74, 0xfa, 0x44, 0x82, 0x9e, 0x32, 0x38, 0x34, 0x08, 0x5d, 0x62, 0x51, 0xf2, 0x66,
	0x8b, 0x52, 0x9b, 0x46, 0xa1, 0x78, 0x18, 0x69, 0x61, 0x51, 0x5e, 0xf9, 0x22, 0xa0, 0xcc, 0x52,
	0x3d, 0xc8, 0x68, 0x32, 0xe5, 0x85, 0x13, 0x5d, 0x98, 0x41, 0x0f, 0x22, 0x12, 0x6a, 0x2e, 0x9c,
	0xf0, 0x16, 0x70, 0x10, 0xaa, 0x2d, 0xa4, 0x32, 0xdd, 0xbe, 0xf1, 0xf5, 0xaf, 0x19, 0x5a, 0xe0,
	0x83, 0xf4, 0x88, 0xa5, 0x9b, 0x1a, 0x9a, 0xb0, 0x94, 0xfb, 0x41, 0x8e, 0x10, 0x56, 0x56, 0x41,
	0xd8, 0xee, 0x5b, 0x16, 0x31, 0xd4, 0x81, 0xb7, 0xd9, 0x0e, 0x43, 0xa4, 0xf7, 0xdd, 0x59, 0xd7,
	0xc5, 0x25, 0xe6, 0x97, 0xe0, 0x53, 0x10, 0x39, 0x5c, 0xf7, 0x39, 0x72, 0x4f, 0xc2, 0xc4, 0x38,
	0xf2, 0x38, 0x23, 0xa2, 0xfc, 0x1c, 0x72, 0x35, 0xa7, 0xed, 0x8d, 0xf0, 0x69, 0xc8, 0x44, 0x1e,
	0xcc, 0x38, 0x00, 0xa5, 0xe3, 0x9f, 0xc3, 0x0f, 0x21, 0x5f, 0x73, 0xda, 0x43, 0xee, 0xf7, 0xc3,
	0xb8, 0x8f, 0x42, 0x7c, 0x84, 0x71, 0x19, 0x8a, 0x3b, 0x7d, 0xa7, 0x6f, 0x11, 0x9f, 0x92, 0x1b,
	0xe7, 0x7d, 0x56, 0xa9, 0xe7, 0xa4, 0xfc, 0xec, 0x9f, 0xc0, 0x22, 0x83, 0xda, 0xbe, 0xcf, 0x1c,
	0x32, 0x83, 0x88, 0x43, 0x8c, 0x4c, 0xe2, 0xb7, 0xa0, 0xd0, 0xfc, 0x4c, 0xf1, 0xcd, 0x61, 0x3f,
	0x64, 0x0e, 0x5f, 0x9b, 0x71, 0x00, 0x46, 0xc9, 0x3f, 0x85, 0x1f, 0x41, 0x11, 0x81, 0xc3, 0x19,
	0x34, 0xc2, 0x66, 0x10, 0x6d, 0x80, 0x91, 0x09, 0xfc, 0xd7, 0x22, 0x24, 0x51, 0x35, 0x84, 0x29,
	0xc7, 0x35, 0x48, 0x3b, 0xba, 0x7a, 0x46, 0x2c, 0x6e, 0x8a, 0xf9, 0x7f, 0x01, 0x33, 0x9d, 0x08,
	0x9a, 0x69, 0x11, 0x92, 0xba, 0xad, 0x1b, 0xa8, 0xed, 0xb2, 0x12, 0xfe, 0x16, 0x05, 0x48, 0x74,
	0x4c, 0x07, 0xb5, 0x58, 0x4a, 0xa2, 0x3f, 0xe9, 0x59, 0x43, 0xe5, 0x3b, 0x1a, 0x15, 0x51, 0x56,
	0xf2, 0xfe, 0x17, 0x77, 0x20, 0x75, 0xd6, 0x31, 0x8d, 0x53, 0xae, 0x47, 0xde, 0x9b, 0x71, 0x7e,
	0x4f, 0xfa, 0xa6, 0xa3, 0x50, 0x0f, 0x54, 0x62, 0xe8, 0xe2, 0x1e, 0xa4, 0xcf, 0xec, 0xcf, 0x4c,
	0xcb, 0xe1, 0xaa, 0x24, 0x3a, 0x21, 0x8e, 0x4f, 0x39, 0xd2, 0x90, 0xa3, 0xec, 0xbc, 0x1c, 0x69,
	0x2e, 0x47, 0x1a, 0xe3, 0x08, 0xe6, 0xe5, 0x88, 0xe1, 0x8b, 0x07, 0x90, 0x45, 0x92, 0x72, 0x57,
	0x37, 0xb8, 0x2b, 0x1c, 0x9d, 0x58, 0x06, 0x49, 0x1c, 0xe8, 0x06, 0xd5, 0x80, 0x8c, 0x30, 0xd2,
	0xcb, 0xcf, 0x49, 0x2f, 0xcb, 0x68, 0x50, 0x82, 0x5f, 0x03, 0x91, 0xd1, 0x23, 0x86, 0x72, 0xd2,
	0x21, 0x9a, 0xdc, 0xee, 0x28, 0xa7, 0xe8, 0x20, 0x67, 0x24, 0x01, 0x5b, 0x6a, 0xac, 0x61, 0xa7,
	0xa3, 0x9c, 0xd2, 0x3d, 0x63, 0x28, 0xdc, 0x53, 0xcd, 0x4a, 0xf8, 0x7b, 0xe4, 0x34, 0x2a, 0x04,
	0x4e, 0xa3, 0xdf, 0x84, 0x12, 0xd7, 0xf4, 0x2f, 0xfa, 0x8a, 0xe1, 0xe8, 0xce, 0x80, 0xaa, 0x7c,
	0x79, 0x40, 0x14, 0xab, 0xb4, 0x84, 0x9b, 0x6c, 0x95, 0xb5, 0x3f, 0xe1, 0xcd, 0x47, 0xc4, 0x7a,
	0x4e, 0x14, 0x4b, 0xfc, 0x04, 0x0a, 0x5d, 0xc5, 0xe9, 0x5b, 0x14, 0x03, 0x8d, 0x8c, 0x38, 0xd5,
	0xc8, 0xe4, 0x5d, 0x04, 0xb4, 0x31, 0x8f, 0x61, 0xc1, 0x30, 0xbb, 0xba, 0xa1, 0x74, 0x4a, 0xcb,
	0xf3, 0xda, 0x64, 0x97, 0x82, 0xf8, 0xff, 0xa1, 0x48, 0x1d, 0x54, 0x22, 0x5b, 0xe4, 0x94, 0xb1,
	0xb3, 0x3a, 0x9d, 0x1d, 0xc4, 0x90, 0xc8, 0x29, 0xb2, 0x53, 0x81, 0x62, 0xaf, 0xa3, 0xa8, 0x04,
	0x9d, 0x5d, 0xa4, 0xb0, 0x36, 0xdd, 0x6a, 0x7a, 0x18, 0x48, 0xe2, 0xfb, 0xb0, 0x38, 0x24, 0xd1,
	0xb3, 0x74, 0x95, 0x94, 0xd6, 0xe7, 0x9d, 0xd9, 0x90, 0x99, 0x23, 0x4a, 0x48, 0x6c, 0x40, 0x56,
	0x51, 0x75, 0xf9, 0x9c, 0x36, 0x96, 0x4a, 0xf3, 0x52, 0xcd, 0x28, 0xaa, 0x8e, 0xbf, 0xc4, 0x2f,
	0xa3, 0x97, 0x60, 0x38, 0xd6, 0x40, 0x36, 0xdb, 0xb2, 0xa5, 0xdb, 0x67, 0xa5, 0x9b, 0xb8, 0x35,
	0x0a, 0x1c, 0x7c, 0xd8, 0x96, 0x74, 0xfb, 0x4c, 0x7c, 0x17, 0x56, 0x02, 0xfd, 0x64, 0xdc, 0x5f,
	0x1b, 0xd8, 0x79, 0x69, 0xa4, 0x73, 0x83, 0x6e, 0xb6, 0x35, 0x48, 0xdb, 0x44, 0x75, 0x4c, 0xab,
	0x74, 0x8b, 0xe9, 0x3a, 0xf6, 0x1f, 0xd5, 0x75, 0xba, 0x6d, 0xf7, 0x89, 0x7c, 0xa6, 0x1b, 0x5a,
	0xe9, 0x0d, 0xa6, 0xeb, 0x10, 0xf2, 0x58, 0x37, 0xb4, 0x61, 0xb3, 0xad, 0x7f, 0x4e, 0x4a, 0xb7,
	0xd1, 0xff, 0x63, 0xcd, 0x4d, 0xfd, 0x73, 0x64, 0x77, 0xd8, 0x2c, 0xf7, 0x3a, 0x8a, 0x51, 0xba,
	0x83, 0x7d, 0x0a, 0x5e, 0x9f, 0xa3, 0x8e, 0x62, 0x88, 0x2a, 0x14, 0xdd, 0x98, 0x06, 0x3f, 0xb0,
	0xdc, 0x45, 0xdf, 0xec, 0xdb, 0xb3, 0x6a, 0x76, 0xa2, 0xe2, 0x0e, 0x75, 0x03, 0x3a, 0xec, 0xd4,
	0x52, 0x70, 0xfc, 0xff, 0x8a, 0x37, 0x21, 0x63, 0x3a, 0x2a, 0x93, 0xc3, 0x7b, 0x28, 0x87, 0x0b,
	0xa6, 0xa3, 0xa2, 0xf8, 0x7d, 0x0d, 0xc4, 0x93, 0xfe, 0x40, 0x56, 0xce, 0x15, 0xbd, 0x43, 0x85,
	0x92, 0x75, 0x7a, 0x93, 0x09, 0xeb, 0x49, 0x7f, 0x50, 0x71, 0x1b, 0xb0, 0xf7, 0x26, 0x2c, 0xdb,
	0xa4, 0xd3, 0x09, 0x76, 0x2f, 0x63, 0xf7, 0x25, 0xda, 0x34, 0xda, 0xff, 0x3d, 0x58, 0x69, 0x77,
	0x4c, 0xc5, 0xa1, 0xd3, 0xe3, 0x52, 0x8b, 0x08, 0x6f, 0x21, 0x82, 0xe8, 0xb6, 0x31, 0x07, 0x13,
	0x31, 0xee, 0x43, 0xb1, 0x47, 0xac, 0x1e, 0x71, 0xfa, 0x4a, 0x87, 0xf5, 0xfd, 0x12, 0xf6, 0x2d,
	0x78, 0x50, 0xec, 0xf6, 0x55, 0x58, 0x52, 0xba, 0xa6, 0xe5, 0xe8, 0x9f, 0xa3, 0xfa, 0x61, 0x3d,
	0xef, 0x33, 0xae, 0xfd, 0x0d, 0xd8, 0xf9, 0x47, 0xb0, 0xdc, 0xd5, 0x0d, 0xb6, 0xc1, 0x65, 0xdd,
	0x50, 0x2d, 0xdc, 0xa6, 0xa5, 0x2f, 0xcf, 0xa9, 0xea, 0x96, 0xba, 0xba, 0x81, 0x7b, 0xbc, 0xee,
	0x92, 0xa2, 0x4a, 0x49, 0xe9, 0xe9, 0x18, 0x9d, 0x22, 0xc1, 0xc5, 0x79, 0x1b, 0xb9, 0x5a, 0x55,
	0x7a, 0x3a, 0xfd, 0x46, 0x64, 0x74, 0x81, 0x04, 0x48, 0xf4, 0x75, 0xad, 0xf4, 0x0e, 0xee, 0x2e,
	0xfa, 0x53, 0x7c, 0x06, 0x05, 0x8b, 0x28, 0x1d, 0xd9, 0x53, 0x80, 0x5f, 0xc1, 0xfd, 0xf0, 0xc1,
	0x8c, 0x6c, 0x4a, 0x44, 0xe9, 0xd4, 0x38, 0xaa, 0x94, 0xb7, 0x7c, 0xff, 0x95, 0x7f, 0x0d, 0x90,
	0x71, 0x5d, 0xc9, 0xd7, 0x56, 0xff, 0xb5, 0xd5, 0xff, 0x22, 0x59, 0x7d, 0x9f, 0xed, 0x5d, 0xba,
	0xb2, 0xed, 0x0d, 0x31, 0x25, 0x62, 0x14, 0x53, 0xb2, 0x3c, 0xc9, 0x94, 0x8c, 0x2b, 0xf3, 0x95,
	0x97, 0xab, 0xcc, 0x57, 0x67, 0x51, 0xe6, 0x6b, 0xd1, 0x94, 0xf9, 0xfa, 0x24, 0x65, 0xfe, 0x00,
	0x96, 0x74, 0xdb, 0x94, 0x5d, 0xa9, 0x65, 0x6b, 0x51, 0xc2, 0xb5, 0x58, 0xd4, 0x6d, 0xd3, 0x55,
	0x2d, 0xb8, 0x12, 0x13, 0x54, 0xee, 0xcd, 0x57, 0xa3, 0x72, 0x37, 0x66, 0x50, 0xb9, 0xb7, 0x2e,
	0x51, 0xb9, 0x6f, 0x5c, 0x97, 0xca, 0xfd, 0xbb, 0x3c, 0x24, 0x6a, 0x4e, 0xfb, 0xb5, 0xb6, 0x7d,
	0xad, 0x6d, 0xbf, 0x48, 0xda, 0xf6, 0x07, 0x20, 0xb4, 0xf5, 0x0b, 0xa2, 0xc9, 0xaa, 0xd9, 0xed,
	0xea, 0xb6, 0xad, 0x9b, 0x06, 0x57, 0xbb, 0xd1, 0x99, 0x5e, 0x44, 0x4a, 0xdb, 0x1e, 0x21, 0xba,
	0xbf, 0xdb, 0xa6, 0xda, 0xb7, 0x59, 0x24, 0x92, 0x29, 0xde, 0x2c, 0x42, 0x30, 0xaa, 0xf8, 0x09,
	0x15, 0xc6, 0x0e, 0x51, 0x6c, 0xc2, 0x63, 0x81, 0xcb, 0xd3, 0xcf, 0x45, 0x2e, 0x02, 0x1e, 0x6a,
	0x0e, 0x01, 0x8c, 0x7e, 0x57, 0xb6, 0x31, 0x7c, 0x82, 0x0a, 0x78, 0xae, 0xb5, 0x36, 0xfa, 0x5d,
	0x16, 0x81, 0x09, 0x33, 0x17, 0xab, 0x51, 0xcc, 0xc5, 0xda, 0xf4, 0x93, 0xc7, 0xfa, 0xc8, 0xc9,
	0xe3, 0x2b, 0x20, 0x58, 0xe4, 0x44, 0xe9, 0x28, 0x86, 0x4a, 0x4d, 0x49, 0xdb, 0x22, 0x2f, 0x5c,
	0x3d, 0xeb, 0x83, 0xef, 0x58, 0xe4, 0x45, 0x88, 0xc5, 0xb9, 0xf9, 0x72, 0x2d, 0xce, 0xc6, 0x2c,
	0x16, 0xe7, 0x56, 0x34, 0x8b, 0xf3, 0xc6, 0x24, 0x8b, 0x33, 0xc1, 0x8a, 0xdc, 0x7e, 0x35, 0x56,
	0xe4, 0xce, 0x0c, 0x56, 0xe4, 0xee, 0x25, 0x56, 0xe4, 0xde, 0x75, 0x59, 0x91, 0x9f, 0x17, 0x20,
	0xcd, 0x62, 0x90, 0xd7, 0x69, 0x48, 0xb8, 0xd1, 0x48, 0x86, 0x1b, 0x8d, 0xd4, 0x24, 0xa3, 0x91,
	0xbe, 0x2e, 0xa3, 0xb1, 0x70, 0x5d, 0x46, 0x23, 0x73, 0x5d, 0x46, 0x23, 0x7b, 0x9d, 0x46, 0x03,
	0xae, 0xd9, 0x68, 0xe4, 0x5e, 0x96, 0xd1, 0xc8, 0x4f, 0x31, 0x1a, 0x85, 0x09, 0x46, 0xa3, 0x18,
	0x30, 0x1a, 0x55, 0x6a, 0x34, 0x2c, 0xdb, 0xe1, 0xc2, 0x84, 0xba, 0x7b, 0xfa, 0xf5, 0x73, 0x11,
	0x71, 0x50, 0xc0, 0xdc, 0xcb, 0xa0, 0x8e, 0x32, 0x4a, 0x44, 0x98, 0x1e, 0xd6, 0xa2, 0x28, 0x43,
	0x1a, 0x6f, 0x42, 0xbe, 0xcd, 0xe2, 0xff, 0xcc, 0xc6, 0x2c, 0x21, 0xa7, 0x39, 0x0e, 0x73, 0xef,
	0x9b, 0x15, 0xdb, 0x26, 0xce, 0x88, 0x11, 0x42, 0x08, 0x36, 0xdf, 0x85, 0xdc, 0x89, 0x62, 0xeb,
	0xaa, 0x8c, 0x20, 0xee, 0xf0, 0x03, 0x82, 0x2a, 0x14, 0x22, 0x7e, 0x1f, 0x04, 0x5f, 0x07, 0x16,
	0x03, 0x9a, 0xd7, 0xd4, 0x14, 0x87, 0x74, 0xdd, 0xd0, 0xd1, 0xab, 0xb5, 0x37, 0xdb, 0xb0, 0x48,
	0x2e, 0x7a, 0xba, 0xc5, 0x42, 0x29, 0xb8, 0xe6, 0xa5, 0x19, 0x32, 0x2c, 0x3c, 0x14, 0x5c, 0xf4,
	0xd7, 0x96, 0xe8, 0xff, 0x80, 0x25, 0xfa, 0xa7, 0x3c, 0xa4, 0xd0, 0x2b, 0x7a, 0x7d, 0xa2, 0x79,
	0x7d, 0xa2, 0xf9, 0x22, 0x9d, 0x68, 0x3e, 0x82, 0x8c, 0xde, 0x33, 0x99, 0x6e, 0x5b, 0x9a, 0x9e,
	0x8b, 0xa1, 0xf7, 0x4c, 0x54, 0x6a, 0xa3, 0x41, 0x7e, 0x31, 0x24, 0xc8, 0x1f, 0xd4, 0xd4, 0xcb,
	0x51, 0x34, 0xf5, 0xca, 0x74, 0x4d, 0xbd, 0x3a, 0xa2, 0xa9, 0x43, 0x6e, 0x15, 0xd6, 0xc2, 0x6e,
	0x15, 0x7c, 0xe1, 0xb2, 0xf5, 0x2b, 0x87, 0xcb, 0xfe, 0x77, 0x6b, 0xf6, 0x2f, 0x41, 0x51, 0xd3,
	0xcf, 0xe5, 0x81, 0x4e, 0x3a, 0x7c, 0xcf, 0xdd, 0x66, 0x79, 0xa5, 0x9a, 0x7e, 0xfe, 0x9c, 0x02,
	0xb1, 0xd7, 0x21, 0x00, 0x1e, 0x28, 0x99, 0xbf, 0x70, 0x07, 0xe7, 0xff, 0x5e, 0x94, 0xcb, 0x77,
	0xcc, 0x9e, 0xc9, 0xda, 0xee, 0xcf, 0x49, 0x06, 0xe5, 0xee, 0xab, 0x31, 0x28, 0xf7, 0x66, 0x30,
	0x28, 0x6f, 0x5e, 0x62, 0x50, 0xca, 0xd7, 0x65, 0x50, 0xfe, 0x28, 0x06, 0x1b, 0xbb, 0xc4, 0xa9,
	0xa8, 0xaa, 0xd5, 0x27, 0x5a, 0xdd, 0x70, 0x88, 0x45, 0x6c, 0xe7, 0x37, 0x96, 0x94, 0xf6, 0x93,
	0x18, 0xdc, 0x0a, 0x65, 0x87, 0x27, 0x61, 0xa8, 0xb0, 0xa4, 0xb0, 0x36, 0x59, 0x77, 0x1b, 0x23,
	0xe6, 0x65, 0x07, 0x68, 0x4b, 0x82, 0x12, 0x18, 0xac, 0xfc, 0x57, 0x71, 0x58, 0x0c, 0xf4, 0x8a,
	0x9c, 0x2d, 0xbd, 0x03, 0x29, 0x76, 0xf3, 0x1a, 0x9f, 0xd7, 0xfe, 0x20, 0xba, 0x78, 0x0c, 0x05,
	0xfc, 0x21, 0xf7, 0x88, 0xa5, 0xd2, 0x0d, 0x9a, 0x98, 0x93, 0x5e, 0x1e, 0xc9, 0x1c, 0x31, 0x2a,
	0xe2, 0xa7, 0x43, 0xfd, 0x94, 0x9c, 0x93, 0xa0, 0x4b, 0xa0, 0xfc, 0x75, 0x58, 0xdf, 0x25, 0x0e,
	0x4f, 0xf8, 0x39, 0x50, 0xac, 0x53, 0xdd, 0xb8, 0x64, 0xfb, 0x94, 0xff, 0x36, 0x01, 0xa5, 0xf1,
	0xfe, 0xfc, 0xfb, 0x6a, 0xb0, 0xaa, 0x1b, 0xba, 0xa3, 0x2b, 0x1d, 0xb9, 0x8b, 0x2d, 0xb2, 0x69,
	0xc8, 0x27, 0xfd, 0x01, 0x5f, 0xf7, 0x39, 0xb4, 0xa8, 0xc8, 0xe9, 0xb1, 0x81, 0x0e, 0x8d, 0xad,
	0xfe, 0x40, 0x6c, 0xc3, 0xda, 0xf8, 0x28, 0x54, 0x33, 0xf1, 0xaf, 0x35, 0xc7, 0x30, 0xcb, 0x81,
	0x61, 0x9a, 0xa4, 0xd3, 0x99, 0xa4, 0x63, 0x12, 0xd7, 0xa7, 0x63, 0xba, 0xb0, 0x11, 0x32, 0x82,
	0xac, 0x74, 0xa9, 0x45, 0x9b, 0xfb, 0xd3, 0xae, 0x8f, 0x0d, 0x54, 0x41, 0x82, 0xe5, 0x53, 0x7f,
	0xda, 0xaf, 0x2f, 0xb7, 0x6e, 0x3c, 0xf3, 0xea, 0x61, 0xe4, 0x7c, 0xdf, 0x91, 0xf4, 0xab, 0x5f,
	0x01, 0xc0, 0xb0, 0xe9, 0xb5, 0xb3, 0xfb, 0xda, 0xd9, 0xfd, 0x9f, 0xe0, 0xec, 0x16, 0x27, 0x38,
	0xbb, 0x8b, 0x01, 0x67, 0x37, 0xc4, 0x2d, 0x15, 0xa2, 0xb8, 0xa5, 0x4b, 0x93, 0xdc, 0xd2, 0xb7,
	0x61, 0xd1, 0x97, 0x60, 0xef, 0x0b, 0x9d, 0x14, 0x87, 0x60, 0xf4, 0x6e, 0xc6, 0x5d, 0xc6, 0xe5,
	0x97, 0xeb, 0x32, 0xae, 0xcc, 0xe2, 0x32, 0xae, 0x46, 0x73, 0x19, 0xd7, 0x22, 0x06, 0x03, 0xd6,
	0x5f, 0x8d, 0xef, 0x56, 0x9a, 0xc1, 0x77, 0xbb, 0x79, 0x89, 0xef, 0xb6, 0x71, 0x5d, 0xbe, 0xdb,
	0xcf, 0x62, 0xb0, 0xbc, 0x4b, 0x9c, 0xaa, 0x7e, 0xae, 0x6b, 0x04, 0x6b, 0x16, 0x7e, 0x33, 0x4e,
	0x1b, 0x81, 0x95, 0x51, 0x36, 0xbc, 0xac, 0xe2, 0xac, 0xe6, 0x02, 0x23, 0x66, 0x5c, 0xbb, 0xc4,
	0xa4, 0x21, 0x85, 0xf2, 0x4f, 0x53, 0x90, 0x71, 0xe1, 0x62, 0x0b, 0xf2, 0x6e, 0x8b, 0x6c, 0x10,
	0x67, 0x7e, 0xff, 0x20, 0xe7, 0x92, 0x69, 0x10, 0x47, 0xfc, 0x0e, 0xa6, 0xfe, 0x0f, 0x13, 0xfa,
	0xa6, 0xaf, 0x56, 0x8e, 0xf7, 0xc7, 0xd3, 0xea, 0x27, 0x50, 0xd0, 0x88, 0xda, 0x51, 0x2c, 0xf7,
	0xea, 0x6c, 0xfa, 0xfa, 0xe5, 0x5d, 0x04, 0x24, 0xf0, 0x5d, 0xc0, 0x48, 0x2a, 0xf5, 0x78, 0x66,
	0x2d, 0x5b, 0xc8, 0x51, 0x84, 0xad, 0xfe, 0xc0, 0xcd, 0xc2, 0xf7, 0x56, 0x05, 0xb5, 0x03, 0xbb,
	0x45, 0xf0, 0x96, 0x0a, 0x75, 0xc3, 0xc7, 0x90, 0xb3, 0x88, 0x6a, 0x5a, 0x9c, 0xc7, 0xf4, 0xf4,
	0xc2, 0x0b, 0xd6, 0x1d, 0x47, 0xb8, 0x03, 0x60, 0x91, 0xd3, 0x7e, 0x47, 0xa1, 0xda, 0x01, 0x2d,
	0x60, 0x56, 0xf2, 0x41, 0xb0, 0xce, 0xa1, 0x63, 0xda, 0x84, 0x67, 0x33, 0x66, 0xe6, 0xae, 0x9d,
	0x40, 0x2a, 0x2c, 0x93, 0xf1, 0x09, 0xe4, 0xd8, 0xe9, 0x90, 0x79, 0xd4, 0xf3, 0x1a, 0x39, 0x40,
	0x22, 0x2c, 0x99, 0xf1, 0x11, 0x80, 0x6a, 0x11, 0xc5, 0x21, 0x9a, 0xac, 0x38, 0x33, 0x94, 0xc5,
	0x65, 0x79, 0xef, 0x8a, 0x53, 0xbe, 0x03, 0x79, 0x0c, 0x15, 0xbb, 0xd2, 0xc6, 0x4a, 0xa3, 0x62,
	0x5e, 0x69, 0xd4, 0xf7, 0xa0, 0xc0, 0xdb, 0xb9, 0x18, 0xec, 0x40, 0x8a, 0x45, 0xb1, 0x63, 0x91,
	0x18, 0x47, 0x22, 0x3b, 0xfd, 0x4e, 0x47, 0x62, 0xe8, 0xe5, 0x45, 0x4e, 0xd8, 0x95, 0xf3, 0xf2,
	0x53, 0x28, 0xba, 0x00, 0x3e, 0x54, 0x15, 0xd2, 0xd8, 0x37, 0x6a, 0x7a, 0x3a, 0x63, 0x98, 0xe3,
	0x96, 0xff, 0x3e, 0x0d, 0x59, 0x6f, 0x74, 0x57, 0xa3, 0xc5, 0x86, 0x1a, 0xad, 0x0a, 0x49, 0xdc,
	0x5c, 0xf1, 0x48, 0xa7, 0xf0, 0x8a, 0x1b, 0xdc, 0x97, 0x10, 0xdb, 0x33, 0xaa, 0x09, 0x9f, 0x51,
	0xbd, 0x0d, 0x40, 0xff, 0xca, 0x27, 0x96, 0x4e, 0xda, 0xdc, 0x45, 0xcb, 0x52, 0xc8, 0x16, 0x05,
	0x88, 0xf7, 0x20, 0xa7, 0x11, 0x5b, 0xb5, 0xf4, 0x1e, 0xfd, 0xa0, 0x7c, 0x73, 0xfb, 0x41, 0xf4,
	0xbb, 0x6a, 0xa4, 0x43, 0xf8, 0x77, 0x9d, 0xbe, 0xb5, 0xb3, 0xbc, 0x77, 0xc5, 0x11, 0xef, 0x43,
	0xd1, 0x22, 0x2f, 0xfa, 0x3a, 0x15, 0x5e, 0x07, 0xcf, 0x95, 0x0b, 0xf7, 0x12, 0xd4, 0x66, 0xbb,
	0xd0, 0x16, 0x05, 0x8a, 0x92, 0xcf, 0x33, 0x64, 0xbb, 0xfb, 0xc3, 0x28, 0x0b, 0xe0, 0x26, 0xe9,
	0xec, 0xdd, 0xf0, 0x79, 0x94, 0x12, 0x64, 0x6c, 0x6e, 0x70, 0xf9, 0xee, 0x8e, 0x44, 0xd3, 0x35,
	0xd6, 0x94, 0xa6, 0x4b, 0x47, 0xbc, 0x07, 0xf9, 0x53, 0xd3, 0xc6, 0xec, 0x66, 0x74, 0x84, 0x81,
	0x89, 0xea, 0xa9, 0x69, 0x4b, 0xe4, 0xd4, 0xbd, 0x7f, 0x54, 0xdb, 0x3a, 0x7a, 0x67, 0x59, 0x89,
	0xfe, 0xa4, 0x06, 0x9d, 0xf6, 0x95, 0x0d, 0x5b, 0x43, 0x27, 0x2b, 0x2b, 0x2d, 0xd0, 0xff, 0x1b,
	0xb6, 0x86, 0x01, 0x31, 0xe6, 0x48, 0x14, 0x78, 0x40, 0x8c, 0xf9, 0x00, 0x5b, 0x90, 0x3a, 0xb1,
	0x14, 0x43, 0xe3, 0x45, 0x93, 0xb3, 0x6e, 0xb8, 0x2d, 0x8a, 0x23, 0x31, 0x54, 0xfa, 0xd1, 0xfa,
	0x3d, 0xcd, 0x15, 0xc6, 0xe9, 0x57, 0x56, 0x59, 0xde, 0xbb, 0xe2, 0x88, 0xeb, 0xb0, 0x70, 0x62,
	0xb1, 0x09, 0x32, 0x0f, 0x2b, 0x7d, 0x62, 0xe1, 0xe4, 0xee, 0x41, 0x9e, 0x37, 0xf8, 0x5d, 0x2a,
	0x60, 0xad, 0xe8, 0x4b, 0x3d, 0x1b, 0xad, 0xe7, 0x10, 0xa3, 0x05, 0x11, 0xe8, 0xba, 0xfb, 0xce,
	0x2e, 0x7e, 0x52, 0x5b, 0x29, 0x48, 0x90, 0x0b, 0xa7, 0xfc, 0x8f, 0x31, 0x48, 0xb1, 0xcb, 0xaa,
	0x57, 0x29, 0x42, 0x81, 0x69, 0x25, 0xaf, 0x6d, 0x5a, 0xe5, 0x0f, 0xb9, 0xfe, 0xf1, 0x52, 0x58,
	0xdf, 0x82, 0xc2, 0x89, 0x62, 0x13, 0x2f, 0x21, 0x8d, 0x4f, 0x30, 0x4f, 0x81, 0x6e, 0xa7, 0xf2,
	0xbf, 0x24, 0x38, 0x9a, 0xbb, 0x4b, 0xbd, 0x13, 0x58, 0xcc, 0x77, 0x02, 0x13, 0x7d, 0xeb, 0x91,
	0xe5, 0xb3, 0xab, 0x43, 0x0a, 0xc3, 0x75, 0xdc, 0x8a, 0x3e, 0x8c, 0x24, 0x12, 0x14, 0x71, 0xef,
	0x86, 0xc4, 0x28, 0x88, 0x3b, 0x90, 0xc4, 0x52, 0xbe, 0x64, 0x74, 0x0d, 0xbc, 0x65, 0x1a, 0xda,
	0xde, 0x0d, 0x09, 0xf1, 0xc5, 0x43, 0x88, 0xdb, 0x3d, 0x5e, 0x10, 0xf8, 0x9d, 0x48, 0xfc, 0x38,
	0x56, 0x5f, 0x75, 0xfa, 0x16, 0xd1, 0x8e, 0x2c, 0x53, 0xeb, 0xab, 0xce, 0xde, 0x0d, 0x29, 0x6e,
	0xf7, 0xc4, 0x6d, 0x48, 0x10, 0xa7, 0xcd, 0x15, 0xd5, 0xbb, 0x51, 0x28, 0xd6, 0x9c, 0xf6, 0xde,
	0x0d, 0x89, 0x62, 0x8b, 0x0e, 0xac, 0x78, 0xf5, 0xd0, 0x2a, 0xb1, 0x1c, 0xbd, 0xad, 0xab, 0xc3,
	0x52, 0xc0, 0x4f, 0x22, 0xa9, 0x27, 0x4e, 0x67, 0x7b, 0x48, 0x66, 0xef, 0x86, 0xe4, 0x95, 0x6e,
	0xfb, 0xc0, 0xee, 0x2e, 0xff, 0xb3, 0x05, 0x80, 0xe1, 0x92, 0x7b, 0x1b, 0x3b, 0x36, 0x67, 0x84,
	0x96, 0x7d, 0xfa, 0xc3, 0x91, 0xb0, 0xff, 0xbc, 0x21, 0x34, 0xdf, 0x45, 0x81, 0x2f, 0xde, 0x95,
	0xb8, 0x62, 0xbc, 0x4b, 0xfc, 0x0a, 0x08, 0xfc, 0xe7, 0x70, 0xe7, 0x33, 0x53, 0xb5, 0xc8, 0xe1,
	0x7e, 0x09, 0xe9, 0x59, 0x7a, 0x57, 0xb1, 0x06, 0xb2, 0x6e, 0x68, 0xe4, 0xc2, 0xf5, 0xc7, 0x38,
	0xb0, 0x4e, 0x61, 0xe2, 0xb1, 0xcf, 0x69, 0xb3, 0x86, 0x1e, 0xd9, 0x1c, 0x21, 0x3e, 0x97, 0x8c,
	0x44, 0x3d, 0xb5, 0xf7, 0xb0, 0xba, 0xbd, 0x4d, 0x2c, 0x6a, 0xd0, 0x7c, 0xb1, 0x73, 0xe6, 0xb3,
	0x89, 0x5e, 0x9b, 0xb7, 0xf6, 0x23, 0x77, 0x34, 0x99, 0xd9, 0xef, 0x68, 0x30, 0x61, 0xec, 0x54,
	0xb7, 0xe9, 0x31, 0x16, 0x71, 0xb3, 0xb3, 0x24, 0x8c, 0x31, 0x84, 0x2a, 0x7f, 0x59, 0x22, 0x70,
	0x03, 0x00, 0x21, 0x37, 0x00, 0xa3, 0xe5, 0x20, 0xb9, 0x60, 0x39, 0xc8, 0x78, 0x35, 0x4e, 0x3e,
	0x6a, 0x35, 0xce, 0x5d, 0xea, 0x18, 0xf7, 0x2c, 0x62, 0xcb, 0xa8, 0x9f, 0x0a, 0xae, 0x73, 0x4b,
	0x41, 0x75, 0xaa, 0xa5, 0x9e, 0x8d, 0xdf, 0xfe, 0x14, 0xe7, 0xfc, 0x56, 0x81, 0xfb, 0xa2, 0x27,
	0x90, 0x73, 0x4c, 0x07, 0x2b, 0x2e, 0x4c, 0xcf, 0x06, 0xce, 0xe1, 0xe2, 0x22, 0x91, 0x1d, 0x4a,
	0xa3, 0xfc, 0x17, 0x59, 0xee, 0xc5, 0x61, 0x91, 0xe1, 0x73, 0x58, 0x64, 0x9b, 0xd5, 0x91, 0x5d,
	0x41, 0x88, 0xcd, 0x9b, 0x2e, 0xc1, 0x09, 0x35, 0xb8, 0x3c, 0xdc, 0x85, 0xdc, 0x89, 0x69, 0x59,
	0xe6, 0x8f, 0x99, 0xa5, 0x8d, 0x73, 0x4b, 0x8b, 0x20, 0xb4, 0xb4, 0xa3, 0xd2, 0x9c, 0xb8, 0x56,
	0x69, 0x4e, 0xbe, 0x0c, 0x69, 0x4e, 0x85, 0x4b, 0xf3, 0xe8, 0x0e, 0x4c, 0x07, 0x77, 0xe0, 0x5b,
	0x50, 0x70, 0xef, 0x24, 0x58, 0x0f, 0x26, 0x69, 0x79, 0x17, 0x88, 0x9d, 0x2e, 0xab, 0x9e, 0xcb,
	0x5c, 0x56, 0x3d, 0xf7, 0x1e, 0xac, 0xa0, 0x0a, 0x21, 0x9a, 0xfb, 0x01, 0x99, 0xa8, 0x64, 0x59,
	0x25, 0x0f, 0x6f, 0xe3, 0xdf, 0xc4, 0x2d, 0xd1, 0xb1, 0xfb, 0x27, 0xa6, 0xa5, 0xe9, 0x06, 0xfa,
	0x56, 0x3e, 0xc9, 0x12, 0xfc, 0x0d, 0xd8, 0xf9, 0x6d, 0x58, 0x54, 0xcd, 0x4e, 0x47, 0x71, 0x88,
	0xe5, 0x52, 0xce, 0x61, 0xd7, 0xe2, 0x10, 0x8c, 0x1d, 0xcb, 0x50, 0x70, 0x94, 0x0b, 0xb9, 0x6d,
	0x11, 0xe2, 0x4f, 0x5f, 0xca, 0x39, 0xca, 0xc5, 0x8e, 0x45, 0xc8, 0xe4, 0xe2, 0xa0, 0xc2, 0x84,
	0xe2, 0xa0, 0x49, 0x25, 0x4a, 0xc5, 0x08, 0x25, 0x4a, 0x8b, 0x61, 0x25, 0x4a, 0x63, 0xf5, 0x86,
	0x42, 0xc4, 0x7a, 0x43, 0x4c, 0x03, 0x75, 0xfa, 0x96, 0x21, 0xab, 0xa6, 0xa1, 0xe9, 0x8e, 0x9b,
	0x85, 0x8b, 0x69, 0xa0, 0x14, 0xbe, 0xed, 0x82, 0x43, 0xaa, 0x09, 0xc5, 0x2b, 0x57, 0x13, 0x2e,
	0x47, 0xd5, 0x5f, 0xcf, 0xc7, 0xab, 0x09, 0xe7, 0x4e, 0x89, 0x0a, 0x14, 0x13, 0x86, 0x68, 0xbe,
	0xd5, 0x6b, 0xd1, 0x7c, 0xf4, 0xb0, 0xb9, 0x16, 0xee, 0x22, 0x05, 0x15, 0x4b, 0x6c, 0x4c, 0xb1,
	0xf8, 0xf4, 0x40, 0xfc, 0x65, 0xe8, 0x81, 0x44, 0xb8, 0x1e, 0x38, 0xe2, 0x3e, 0x4e, 0x32, 0x5a,
	0x48, 0x35, 0x38, 0x3f, 0x9f, 0xbf, 0xf3, 0x36, 0x2c, 0x76, 0xcc, 0x53, 0x5d, 0x95, 0x7b, 0xa6,
	0xe5, 0xb4, 0xcd, 0x8e, 0x6e, 0x72, 0x1d, 0x54, 0x44, 0xf0, 0x91, 0x0b, 0xa5, 0xaa, 0xd4, 0x97,
	0x36, 0x97, 0x9e, 0xf3, 0xf4, 0x30, 0x39, 0xd1, 0x6e, 0x61, 0x2c, 0xd1, 0xee, 0x7b, 0x50, 0xb4,
	0x95, 0x36, 0x71, 0x06, 0xf2, 0x89, 0x62, 0x59, 0x3a, 0xb1, 0xe6, 0xbe, 0xad, 0x28, 0x30, 0x3a,
	0x5b, 0x8c, 0xcc, 0xb8, 0x78, 0x66, 0x23, 0x8a, 0x67, 0xc8, 0x9e, 0x84, 0xeb, 0xb1, 0xc6, 0xa3,
	0x06, 0x2b, 0x77, 0x75, 0x83, 0x75, 0x0d, 0xce, 0xc9, 0xa8, 0xf1, 0x29, 0x04, 0x8c, 0x4f, 0xf9,
	0xaf, 0x8b, 0x90, 0x71, 0xcf, 0x05, 0xd4, 0xa3, 0x64, 0xde, 0x04, 0xb9, 0xe8, 0x11, 0xc3, 0x26,
	0x73, 0x9b, 0xfa, 0x3c, 0x92, 0xa9, 0x31, 0x2a, 0xd4, 0x49, 0xf9, 0xac, 0x6f, 0x69, 0x1d, 0xc2,
	0xdc, 0xd4, 0x79, 0x45, 0x0e, 0x18, 0x11, 0xc9, 0x55, 0x59, 0xc4, 0x6a, 0x9b, 0x56, 0x57, 0x31,
	0x54, 0x22, 0xb7, 0xc9, 0xfc, 0xfe, 0x41, 0xd1, 0x47, 0x68, 0x87, 0x84, 0xd7, 0x50, 0x24, 0xaf,
	0xab, 0x86, 0xe2, 0xcd, 0x61, 0xa0, 0xd8, 0x17, 0x67, 0x75, 0x83, 0xc1, 0x28, 0x59, 0xf7, 0xa1,
	0xf8, 0x63, 0x6a, 0x37, 0xbb, 0x8a, 0x75, 0xc6, 0xac, 0x54, 0x9a, 0x59, 0x29, 0x0f, 0x8a, 0x56,
	0xea, 0x09, 0xe4, 0x4e, 0xfa, 0x03, 0xb9, 0x67, 0x91, 0xae, 0xde, 0xef, 0xce, 0x7d, 0xa7, 0x08,
	0x27, 0xfd, 0xc1, 0x11, 0xa3, 0x41, 0x3f, 0x3f, 0x5e, 0xa7, 0x68, 0xba, 0x8d, 0x57, 0x48, 0x73,
	0x4b, 0x6c, 0x9e, 0x92, 0xa9, 0x72, 0x2a, 0x63, 0x55, 0x11, 0x43, 0xef, 0x63, 0xa4, 0x2a, 0x82,
	0x4e, 0x2a, 0xac, 0x80, 0x02, 0xc2, 0x0b, 0x28, 0xde, 0x86, 0xc5, 0xae, 0x62, 0x28, 0xa7, 0x64,
	0xb8, 0x98, 0xcc, 0xb7, 0x2f, 0x0e, 0xc1, 0xb8, 0x9e, 0x63, 0x67, 0xa9, 0x7c, 0xc8, 0x59, 0x6a,
	0xb4, 0xb6, 0xa5, 0x10, 0xac, 0x6d, 0xb9, 0x0f, 0xc5, 0x0e, 0x39, 0x27, 0x96, 0x72, 0xea, 0xfa,
	0x43, 0xcc, 0xcb, 0x28, 0x78, 0x50, 0x64, 0xff, 0x00, 0xb2, 0x5e, 0x05, 0xcb, 0xdc, 0xbe, 0x78,
	0xc6, 0x2d, 0x60, 0xa1, 0x4c, 0xf5, 0x55, 0xdd, 0xb1, 0xd9, 0x88, 0x02, 0x8e, 0x98, 0x45, 0x88,
	0xeb, 0xa7, 0x8c, 0x16, 0xdc, 0x2c, 0x45, 0x2c, 0xb8, 0x09, 0x84, 0x45, 0xc5, 0xf1, 0xb0, 0xe8,
	0xb7, 0xe0, 0xe6, 0xc8, 0xda, 0xc9, 0xfe, 0xfe, 0x2c, 0x63, 0x6e, 0xdd, 0xbf, 0x8e, 0x55, 0x1f,
	0xee, 0xfb, 0xb0, 0x3a, 0x8a, 0xab, 0x9a, 0xdd, 0x9e, 0x62, 0x0c, 0x78, 0xf2, 0xdc, 0xb2, 0x1f,
	0x6f, 0x9b, 0x35, 0xb1, 0x34, 0x0e, 0xda, 0xd7, 0x22, 0xaa, 0x79, 0x4e, 0xac, 0x81, 0xfb, 0x2a,
	0xd0, 0xbc, 0x4e, 0xc3, 0x32, 0x92, 0x93, 0x38, 0x35, 0xf6, 0x9c, 0x90, 0x78, 0x0b, 0xb2, 0xba,
	0xa1, 0x9c, 0xb3, 0xf0, 0x1f, 0x4b, 0xba, 0xce, 0x50, 0x00, 0x06, 0x00, 0xc7, 0x0f, 0x95, 0xeb,
	0x21, 0x87, 0x4a, 0x19, 0x44, 0xae, 0x23, 0xfd, 0x6a, 0xa2, 0x34, 0xef, 0x45, 0x22, 0xa7, 0xe5,
	0x53, 0x14, 0x2f, 0xe0, 0x8d, 0xd1, 0xd5, 0xa3, 0x68, 0x67, 0xf8, 0x72, 0x9d, 0x65, 0x99, 0xd6,
	0xdc, 0x05, 0x99, 0x37, 0xfd, 0xcb, 0xde, 0xe2, 0x34, 0x6b, 0x94, 0x64, 0x50, 0xf8, 0xd0, 0x30,
	0x6e, 0x8c, 0x09, 0x1f, 0x1a, 0xba, 0x9b, 0x90, 0xa1, 0xce, 0x3c, 0xaa, 0x73, 0x56, 0x8f, 0xb9,
	0xe0, 0x28, 0x17, 0xa8, 0x99, 0x77, 0x61, 0xc9, 0x4f, 0x85, 0x6e, 0x4c, 0xbb, 0xf4, 0x06, 0x46,
	0x13, 0x2f, 0x7d, 0xcd, 0xce, 0x87, 0x44, 0x37, 0xa7, 0x1d, 0x30, 0x5c, 0xb7, 0x83, 0xa7, 0x26,
	0x9f, 0x0f, 0x77, 0xe7, 0x65, 0xf8, 0x70, 0x77, 0x43, 0x7d, 0xb8, 0xf2, 0x2f, 0x63, 0x50, 0x9a,
	0x14, 0xf1, 0xf2, 0xf3, 0x14, 0x7b, 0x19, 0x3c, 0xc5, 0xc3, 0x79, 0xfa, 0xcf, 0x18, 0xa4, 0x30,
	0x30, 0x1e, 0x12, 0x30, 0x76, 0x43, 0xbd, 0x71, 0x5f, 0xa8, 0x37, 0x20, 0xf7, 0x89, 0x71, 0xb9,
	0x17, 0x21, 0xa9, 0x1b, 0x6d, 0xd3, 0x4b, 0x76, 0x31, 0xda, 0xa6, 0x58, 0x82, 0x05, 0x57, 0x82,
	0x53, 0x6e, 0x8c, 0x9f, 0x49, 0xed, 0x30, 0xe9, 0x35, 0x1d, 0x4c, 0x7a, 0x0d, 0xa6, 0x33, 0x2c,
	0x44, 0x49, 0x67, 0xc8, 0x4c, 0x48, 0x67, 0x28, 0xff, 0x5b, 0x0c, 0x16, 0x03, 0x21, 0xe7, 0xf0,
	0xa9, 0xe3, 0x75, 0x76, 0xdc, 0x77, 0x9d, 0x1d, 0x92, 0x08, 0x91, 0x08, 0x4d, 0x84, 0x18, 0x66,
	0x09, 0x25, 0x2f, 0xc9, 0x12, 0x4a, 0x05, 0xb3, 0x84, 0x1e, 0x43, 0xaa, 0xa3, 0x1b, 0x67, 0x76,
	0x29, 0x8d, 0x3b, 0xfe, 0xa3, 0xc8, 0xd9, 0x4c, 0xfb, 0xba, 0x71, 0x26, 0x31, 0x1a, 0xe5, 0xc7,
	0x50, 0x1c, 0x6d, 0xf0, 0xc2, 0xdd, 0x31, 0x5f, 0xb8, 0xfb, 0x3e, 0xf8, 0x78, 0x97, 0xe9, 0x1a,
	0xb0, 0x09, 0x17, 0x86, 0xd0, 0x63, 0x5d, 0x2b, 0xaf, 0xe2, 0x9d, 0xff, 0x8e, 0x72, 0x6e, 0x5a,
	0xba, 0xe3, 0x3d, 0x9e, 0x5b, 0xfe, 0x69, 0x0c, 0x2f, 0xe1, 0x7d, 0x70, 0x7e, 0x25, 0xd8, 0x81,
	0x95, 0x36, 0x07, 0xca, 0xe3, 0xef, 0x57, 0x3d, 0x9a, 0xf5, 0x05, 0x2e, 0x4e, 0xc2, 0x77, 0x37,
	0xb0, 0xdc, 0x1e, 0x83, 0xd9, 0xe5, 0x5f, 0xc7, 0x40, 0x1c, 0xef, 0xfb, 0xb2, 0xf3, 0xb7, 0x42,
	0x76, 0x43, 0x2e, 0x74, 0x37, 0xf8, 0x33, 0x56, 0x84, 0xd1, 0x8c, 0x95, 0xcb, 0x32, 0x3e, 0x96,
	0x2e, 0xc9, 0xf8, 0x28, 0xff, 0x6b, 0x0c, 0x56, 0x6a, 0x9a, 0x3e, 0xf6, 0x49, 0xc4, 0xd3, 0xb0,
	0x07, 0xc3, 0x6a, 0xb3, 0x3e, 0xda, 0x16, 0x42, 0x71, 0xc2, 0xc5, 0x8c, 0x28, 0x43, 0x4e, 0x61,
	0x4f, 0xc8, 0xfa, 0x4e, 0x85, 0xdf, 0x9d, 0x67, 0xa0, 0x0a, 0x92, 0x61, 0x0f, 0x0d, 0x2a, 0xde,
	0xef, 0xf2, 0x87, 0x70, 0xe7, 0x72, 0x7e, 0x42, 0x13, 0x3d, 0x7f, 0x16, 0x83, 0xd5, 0x00, 0xda,
	0x6f, 0x62, 0x4f, 0x3e, 0xf8, 0xe7, 0x18, 0xc0, 0xf0, 0x05, 0x45, 0xf1, 0x16, 0xac, 0x6f, 0x1f,
	0x1e, 0x1f, 0x1d, 0x36, 0xe4, 0xd6, 0xf3, 0xa3, 0x9a, 0x7c, 0xdc, 0x68, 0x1e, 0xd5, 0xb6, 0xeb,
	0x3b, 0xf5, 0x5a, 0x55, 0xb8, 0x21, 0x96, 0x60, 0xc5, 0xdf, 0xb8, 0x7d, 0xd8, 0x68, 0xb6, 0x2a,
	0x8d, 0x96, 0x10, 0x0b, 0xb6, 0xec, 0xec, 0x1f, 0x56, 0x5a, 0xf5, 0xc6, 0xae, 0x10, 0x0f, 0xb6,
	0x54, 0xeb, 0xcd, 0xed, 0xc3, 0xe3, 0x46, 0x4b, 0x48, 0x04, 0x5b, 0x0e, 0x0e, 0xa5, 0xd6, 0x6e,
	0x65, 0xb7, 0x26, 0x24, 0xc5, 0x65, 0x58, 0x1c, 0xa1, 0x56, 0x7f, 0x26, 0xa4, 0x82, 0xdd, 0x9f,
	0x56, 0xa4, 0x7a, 0x65, 0x6b, 0xbf, 0x26, 0xa4, 0xc5, 0x55, 0x58, 0xf2, 0xb7, 0x1c, 0xb6, 0xf6,
	0x6a, 0x92, 0xb0, 0xf0, 0xe0, 0x0f, 0x62, 0x20, 0x04, 0x5f, 0x74, 0x15, 0x6f, 0xc3, 0xcd, 0x7a,
	0xa3, 0xd9, 0x92, 0x8e, 0x0f, 0x6a, 0x8d, 0x96, 0x5c, 0xaf, 0x06, 0x66, 0x78, 0x0b, 0xd6, 0x47,
	0x9b, 0x39, 0x03, 0xbb, 0x75, 0x21, 0x36, 0x8e, 0x8b, 0x8d, 0xad, 0xfa, 0xf6, 0xe3, 0x9a, 0x24,
	0xc4, 0xc5, 0x0d, 0x58, 0x0b, 0x69, 0x3e, 0xae, 0x57, 0x85, 0xc4, 0x83, 0x8e, 0x9f, 0x15, 0x9e,
	0x20, 0xf6, 0x26, 0xdc, 0xf6, 0xf5, 0x6f, 0xb6, 0x2a, 0xad, 0xe3, 0x66, 0x80, 0x9d, 0x51, 0x92,
	0xbc, 0xcb, 0x56, 0xa5, 0x59, 0x13, 0x62, 0xe2, 0x4d, 0x58, 0x1d, 0x6f, 0xab, 0xec, 0xef, 0x0b,
	0xf1, 0x07, 0xff, 0x1e, 0x83, 0xec, 0xf0, 0xe2, 0x62, 0x03, 0xd6, 0x9a, 0x7b, 0x15, 0xa9, 0x16,
	0xf6, 0x45, 0x57, 0x61, 0xc9, 0xd7, 0xb6, 0x7d, 0x78, 0x70, 0x70, 0xd8, 0x60, 0x9f, 0xd3, 0x07,
	0x3e, 0x92, 0x6a, 0x3b, 0x35, 0x49, 0xaa, 0x55, 0x85, 0xb8, 0x28, 0x42, 0xd1, 0xd7, 0x52, 0xa9,
	0x4a, 0x42, 0x22, 0x00, 0xdb, 0xad, 0x4a, 0x42, 0x32, 0x00, 0x3b, 0xd8, 0x3f, 0x12, 0x52, 0x01,
	0x46, 0x1a, 0xcf, 0x65, 0xa9, 0xb6, 0x2b, 0x37, 0xf7, 0xa4, 0xa6, 0x90, 0x16, 0xef, 0xc0, 0x86,
	0x9f, 0x91, 0xfd, 0xc3, 0x66, 0xad, 0x2a, 0xd7, 0x1a, 0x55, 0x79, 0xe7, 0xb8, 0x51, 0x15, 0x16,
	0xe8, 0x96, 0xf0, 0xb5, 0x4b, 0xb5, 0x7a, 0x4b, 0xc8, 0xd0, 0x2f, 0x9c, 0xf5, 0xe2, 0x36, 0x94,
	0x7c, 0xa5, 0xd9, 0xac, 0xb5, 0xc2, 0xe6, 0xb9, 0x0e, 0xcb, 0xbe, 0xb6, 0xed, 0x63, 0x49, 0xaa,
	0x35, 0xb6, 0x9f, 0xb3, 0x99, 0xfa, 0x1b, 0xe8, 0x02, 0x54, 0xeb, 0xad, 0xe7, 0x42, 0x5c, 0x5c,
	0x01, 0xc1, 0xd7, 0x52, 0x6f, 0x54, 0x6b, 0xcf, 0x84, 0x44, 0x80, 0x50, 0xb3, 0xb6, 0x7d, 0x2c,
	0xd1, 0xee, 0xc9, 0x07, 0x6d, 0x58, 0x0d, 0x8d, 0x61, 0x51, 0x8c, 0xe6, 0xd1, 0x04, 0x9e, 0xdc,
	0x86, 0x6a, 0x6d, 0xbf, 0xfe, 0xb4, 0x26, 0xe1, 0x7e, 0x8e, 0xd1, 0x4d, 0xe8, 0x36, 0x34, 0x0e,
	0x1b, 0x23, 0x8d, 0xf1, 0x07, 0xbf, 0x88, 0xc1, 0xfa, 0x04, 0xad, 0x24, 0x3e, 0x80, 0x2f, 0xd7,
	0xaa, 0xf5, 0x96, 0xbc, 0x53, 0x79, 0x7a, 0x28, 0xd5, 0x5b, 0xb5, 0xa6, 0x5c, 0xd9, 0x6e, 0xd5,
	0xc3, 0x65, 0xb9, 0x0c, 0x77, 0x2e, 0xe9, 0x5b, 0xa9, 0x56, 0x85, 0xd8, 0x94, 0x3e, 0xd5, 0x1a,
	0xdd, 0x6b, 0x36, 0xe4, 0xfd, 0x49, 0x78, 0x54, 0x48, 0xa4, 0x5a, 0x65, 0x5f, 0xae, 0x3d, 0xdb,
	0xde, 0xab, 0x34, 0x76, 0x83, 0xc3, 0xae, 0x81, 0x38, 0xda, 0x7c, 0x70, 0x58, 0x7b, 0x26, 0xc4,
	0xe8, 0x46, 0x1c, 0x85, 0x4b, 0xad, 0xa6, 0x10, 0x1f, 0x07, 0x1f, 0xb6, 0xb6, 0x85, 0xc4, 0xfb,
	0xff, 0xb1, 0x32, 0xf2, 0xc2, 0x72, 0x93, 0x58, 0xe7, 0xba, 0x4a, 0xc4, 0x3f, 0x89, 0x81, 0x10,
	0x7c, 0xac, 0x5e, 0xfc, 0xee, 0x7c, 0x2f, 0xd2, 0xbb, 0x6a, 0x7c, 0xe3, 0x93, 0xb9, 0xf1, 0xb9,
	0x3e, 0xff, 0x31, 0xa4, 0xb7, 0x4c, 0x43, 0xdb, 0x1a, 0x88, 0xff, 0x2f, 0x7a, 0xda, 0x37, 0x67,
	0xe2, 0x83, 0x28, 0x4f, 0x2a, 0xbb, 0x03, 0x5f, 0x40, 0x0a, 0x5f, 0x6b, 0x16, 0x1f, 0x45, 0x1e,
	0xd7, 0x9b, 0xfd, 0x87, 0x11, 0x06, 0x1e, 0x4e, 0xf9, 0x17, 0x31, 0x28, 0x8e, 0x3e, 0x9f, 0x2c,
	0xce, 0x1a, 0x08, 0x0e, 0x7d, 0xfe, 0x79, 0xe3, 0x3b, 0x73, 0x62, 0x73, 0x7e, 0x7e, 0x0f, 0xc0,
	0x3d, 0x47, 0x5c, 0xe9, 0x33, 0x7c, 0x33, 0xea, 0x93, 0xb8, 0x2e, 0x03, 0x3f, 0x89, 0x79, 0x1c,
	0xe8, 0xe4, 0x4a, 0x1f, 0xe4, 0x51, 0x34, 0x16, 0xfc, 0xaf, 0xfc, 0xf6, 0x21, 0x55, 0x73, 0xda,
	0x57, 0x5a, 0x80, 0xf7, 0x23, 0xbc, 0xaa, 0xeb, 0x0e, 0x7b, 0x0e, 0xc9, 0x9a, 0xd3, 0xbe, 0xd2,
	0xa4, 0x3f, 0x98, 0x7d, 0xd8, 0xe1, 0x74, 0x7f, 0x07, 0x32, 0xac, 0x8c, 0xe6, 0x4a, 0x33, 0xfe,
	0x28, 0xda, 0x2b, 0xbc, 0xee, 0xe0, 0xbf, 0x0b, 0x0b, 0xbc, 0x86, 0xe7, 0x2a, 0xf3, 0xfe, 0x46,
	0xa4, 0xc1, 0x87, 0x53, 0x1f, 0xc0, 0x02, 0xda, 0xff, 0x2b, 0xcd, 0xfc, 0xc3, 0x48, 0xaf, 0xf7,
	0xba, 0x43, 0x7f, 0x0e, 0x69, 0xfe, 0x30, 0xcd, 0x15, 0xe6, 0xfd, 0x51, 0x94, 0xa1, 0x87, 0xd3,
	0xfe, 0x73, 0x96, 0xf2, 0x1d, 0xac, 0x8f, 0x13, 0x2b, 0xb3, 0x6b, 0x8f, 0x09, 0xa5, 0x7e, 0x1b,
	0x5b, 0x57, 0x21, 0xc1, 0xd9, 0xa3, 0xe6, 0x29, 0x58, 0xdb, 0x35, 0xb3, 0x79, 0x9a, 0x50, 0x44,
	0x36, 0xb3, 0x79, 0x9a, 0x58, 0x54, 0xf6, 0xfb, 0x31, 0x58, 0xdc, 0xf5, 0x07, 0x19, 0xae, 0xb4,
	0x69, 0x1e, 0xcd, 0x81, 0xc9, 0x19, 0xf9, 0x79, 0x0c, 0xf2, 0xfe, 0x4c, 0x79, 0xf1, 0x5b, 0xb3,
	0x4f, 0x2d, 0x98, 0xe5, 0xbf, 0xf1, 0xf1, 0x5c, 0xb8, 0x9e, 0xc5, 0x06, 0xfa, 0x1d, 0x31, 0x3d,
	0x64, 0x20, 0x7e, 0x10, 0x29, 0x4d, 0x38, 0xa2, 0xf0, 0x8c, 0x26, 0x43, 0x5f, 0x40, 0xd6, 0x1d,
	0xd8, 0x16, 0x23, 0x91, 0x88, 0x2c, 0x3a, 0x81, 0xdc, 0x68, 0xbe, 0xf8, 0x9e, 0x57, 0x19, 0x65,
	0xf1, 0x83, 0x27, 0xdf, 0x28, 0x8b, 0x3f, 0x7e, 0xfc, 0xfd, 0xc3, 0x18, 0x14, 0x46, 0x1c, 0x5c,
	0xf1, 0xe3, 0x2b, 0x44, 0x05, 0x36, 0xbe, 0x3d, 0x1f, 0x32, 0x63, 0x66, 0x4b, 0x81, 0x37, 0xac,
	0xfe, 0x90, 0x82, 0x1e, 0xc0, 0x3a, 0x8a, 0x7d, 0x3f, 0xbf, 0xf9, 0xee, 0xc7, 0x8c, 0xa4, 0xd2,
	0xd3, 0x7f, 0x15, 0x4f, 0xb5, 0xea, 0x95, 0xa3, 0xfa, 0x5f, 0xc6, 0x57, 0x5a, 0x1c, 0xa7, 0x8e,
	0x6d, 0x95, 0x9e, 0xbe, 0xf9, 0xf4, 0xe1, 0x3f, 0xc4, 0x97, 0x38, 0xf8, 0x87, 0x0c, 0xfc, 0xc3,
	0xa7, 0x0f, 0x4f, 0xd2, 0x18, 0x27, 0xfe, 0xe0, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xa3,
	0x82, 0x99, 0x66, 0x6a, 0x00, 0x00,
}
