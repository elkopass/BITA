// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package investapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Режим торгов инструмента
type SecurityTradingStatus int32

const (
	SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED                      SecurityTradingStatus = 0
	SecurityTradingStatus_SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING        SecurityTradingStatus = 1
	SecurityTradingStatus_SECURITY_TRADING_STATUS_OPENING_PERIOD                   SecurityTradingStatus = 2
	SecurityTradingStatus_SECURITY_TRADING_STATUS_CLOSING_PERIOD                   SecurityTradingStatus = 3
	SecurityTradingStatus_SECURITY_TRADING_STATUS_BREAK_IN_TRADING                 SecurityTradingStatus = 4
	SecurityTradingStatus_SECURITY_TRADING_STATUS_NORMAL_TRADING                   SecurityTradingStatus = 5
	SecurityTradingStatus_SECURITY_TRADING_STATUS_CLOSING_AUCTION                  SecurityTradingStatus = 6
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DARK_POOL_AUCTION                SecurityTradingStatus = 7
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DISCRETE_AUCTION                 SecurityTradingStatus = 8
	SecurityTradingStatus_SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD           SecurityTradingStatus = 9
	SecurityTradingStatus_SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE SecurityTradingStatus = 10
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_ASSIGNED                 SecurityTradingStatus = 11
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_CLOSE                    SecurityTradingStatus = 12
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_OPEN                     SecurityTradingStatus = 13
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING            SecurityTradingStatus = 14
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING          SecurityTradingStatus = 15
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING SecurityTradingStatus = 16
)

var SecurityTradingStatus_name = map[int32]string{
	0:  "SECURITY_TRADING_STATUS_UNSPECIFIED",
	1:  "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING",
	2:  "SECURITY_TRADING_STATUS_OPENING_PERIOD",
	3:  "SECURITY_TRADING_STATUS_CLOSING_PERIOD",
	4:  "SECURITY_TRADING_STATUS_BREAK_IN_TRADING",
	5:  "SECURITY_TRADING_STATUS_NORMAL_TRADING",
	6:  "SECURITY_TRADING_STATUS_CLOSING_AUCTION",
	7:  "SECURITY_TRADING_STATUS_DARK_POOL_AUCTION",
	8:  "SECURITY_TRADING_STATUS_DISCRETE_AUCTION",
	9:  "SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD",
	10: "SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE",
	11: "SECURITY_TRADING_STATUS_SESSION_ASSIGNED",
	12: "SECURITY_TRADING_STATUS_SESSION_CLOSE",
	13: "SECURITY_TRADING_STATUS_SESSION_OPEN",
	14: "SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING",
	15: "SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING",
	16: "SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING",
}

var SecurityTradingStatus_value = map[string]int32{
	"SECURITY_TRADING_STATUS_UNSPECIFIED":                      0,
	"SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING":        1,
	"SECURITY_TRADING_STATUS_OPENING_PERIOD":                   2,
	"SECURITY_TRADING_STATUS_CLOSING_PERIOD":                   3,
	"SECURITY_TRADING_STATUS_BREAK_IN_TRADING":                 4,
	"SECURITY_TRADING_STATUS_NORMAL_TRADING":                   5,
	"SECURITY_TRADING_STATUS_CLOSING_AUCTION":                  6,
	"SECURITY_TRADING_STATUS_DARK_POOL_AUCTION":                7,
	"SECURITY_TRADING_STATUS_DISCRETE_AUCTION":                 8,
	"SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD":           9,
	"SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE": 10,
	"SECURITY_TRADING_STATUS_SESSION_ASSIGNED":                 11,
	"SECURITY_TRADING_STATUS_SESSION_CLOSE":                    12,
	"SECURITY_TRADING_STATUS_SESSION_OPEN":                     13,
	"SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING":            14,
	"SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING":          15,
	"SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING": 16,
}

func (x SecurityTradingStatus) String() string {
	return proto.EnumName(SecurityTradingStatus_name, int32(x))
}

func (SecurityTradingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

//Денежная сумма в определенной валюте
type MoneyValue struct {
	// строковый ISO-код валюты
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// целая часть суммы, может быть отрицательным числом
	Units int64 `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"`
	// дробная часть суммы, может быть отрицательным числом
	Nano                 int32    `protobuf:"varint,3,opt,name=nano,proto3" json:"nano,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoneyValue) Reset()         { *m = MoneyValue{} }
func (m *MoneyValue) String() string { return proto.CompactTextString(m) }
func (*MoneyValue) ProtoMessage()    {}
func (*MoneyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *MoneyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoneyValue.Unmarshal(m, b)
}
func (m *MoneyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoneyValue.Marshal(b, m, deterministic)
}
func (m *MoneyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoneyValue.Merge(m, src)
}
func (m *MoneyValue) XXX_Size() int {
	return xxx_messageInfo_MoneyValue.Size(m)
}
func (m *MoneyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MoneyValue.DiscardUnknown(m)
}

var xxx_messageInfo_MoneyValue proto.InternalMessageInfo

func (m *MoneyValue) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MoneyValue) GetUnits() int64 {
	if m != nil {
		return m.Units
	}
	return 0
}

func (m *MoneyValue) GetNano() int32 {
	if m != nil {
		return m.Nano
	}
	return 0
}

//Котировка - денежная сумма без указания валюты
type Quotation struct {
	// целая часть суммы, может быть отрицательным числом
	Units int64 `protobuf:"varint,1,opt,name=units,proto3" json:"units,omitempty"`
	// дробная часть суммы, может быть отрицательным числом
	Nano                 int32    `protobuf:"varint,2,opt,name=nano,proto3" json:"nano,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quotation) Reset()         { *m = Quotation{} }
func (m *Quotation) String() string { return proto.CompactTextString(m) }
func (*Quotation) ProtoMessage()    {}
func (*Quotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *Quotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quotation.Unmarshal(m, b)
}
func (m *Quotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quotation.Marshal(b, m, deterministic)
}
func (m *Quotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quotation.Merge(m, src)
}
func (m *Quotation) XXX_Size() int {
	return xxx_messageInfo_Quotation.Size(m)
}
func (m *Quotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Quotation.DiscardUnknown(m)
}

var xxx_messageInfo_Quotation proto.InternalMessageInfo

func (m *Quotation) GetUnits() int64 {
	if m != nil {
		return m.Units
	}
	return 0
}

func (m *Quotation) GetNano() int32 {
	if m != nil {
		return m.Nano
	}
	return 0
}

//Проверка активности стрима.
type Ping struct {
	//Время проверки.
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterEnum("tinkoff.public.invest.api.contract.v1.SecurityTradingStatus", SecurityTradingStatus_name, SecurityTradingStatus_value)
	proto.RegisterType((*MoneyValue)(nil), "tinkoff.public.invest.api.contract.v1.MoneyValue")
	proto.RegisterType((*Quotation)(nil), "tinkoff.public.invest.api.contract.v1.Quotation")
	proto.RegisterType((*Ping)(nil), "tinkoff.public.invest.api.contract.v1.Ping")
}

func init() {
	proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206)
}

var fileDescriptor_555bd8c177793206 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xd1, 0x4e, 0xdb, 0x3e,
	0x14, 0xc6, 0xff, 0x29, 0x2d, 0x7f, 0x38, 0xb0, 0x2d, 0xb3, 0x98, 0x84, 0xd0, 0xa4, 0x21, 0x36,
	0x46, 0x61, 0xc3, 0x55, 0x41, 0x4c, 0x93, 0xb6, 0x1b, 0xd3, 0x1a, 0x64, 0x51, 0x92, 0xcc, 0x76,
	0x2b, 0x6d, 0x42, 0x8a, 0x42, 0x16, 0x2a, 0x6b, 0xd4, 0xae, 0x52, 0x07, 0x89, 0xd7, 0xd9, 0xe5,
	0x1e, 0x65, 0x17, 0x7b, 0xa6, 0xa9, 0x29, 0xcd, 0x10, 0x5b, 0xda, 0xbb, 0x1c, 0xe7, 0xf7, 0xd9,
	0xdf, 0x77, 0xe2, 0x1c, 0x58, 0x8d, 0xcd, 0x60, 0x60, 0x34, 0x1e, 0xa6, 0xc6, 0x1a, 0xb4, 0x6d,
	0x95, 0xfe, 0x66, 0xae, 0xae, 0xf0, 0x30, 0xbb, 0xbc, 0x56, 0x31, 0x56, 0xfa, 0x26, 0x19, 0x59,
	0x1c, 0x0d, 0x15, 0x8e, 0x8d, 0xb6, 0x69, 0x14, 0x5b, 0x7c, 0xd3, 0xdc, 0x78, 0xd1, 0x37, 0xa6,
	0x7f, 0x9d, 0x34, 0x72, 0xd1, 0x65, 0x76, 0xd5, 0xb0, 0x6a, 0x90, 0x8c, 0x6c, 0x34, 0x18, 0x4e,
	0xf6, 0xd9, 0xe2, 0x00, 0xe7, 0x46, 0x27, 0xb7, 0xbd, 0xe8, 0x3a, 0x4b, 0xd0, 0x06, 0x2c, 0xc5,
	0x59, 0x9a, 0x26, 0x3a, 0xbe, 0x5d, 0x77, 0x36, 0x9d, 0xfa, 0x32, 0x2f, 0x6a, 0xb4, 0x06, 0xb5,
	0x4c, 0x2b, 0x3b, 0x5a, 0xaf, 0x6c, 0x3a, 0xf5, 0x05, 0x3e, 0x29, 0x10, 0x82, 0xaa, 0x8e, 0xb4,
	0x59, 0x5f, 0xd8, 0x74, 0xea, 0x35, 0x9e, 0x3f, 0x6f, 0x1d, 0xc1, 0xf2, 0xa7, 0xcc, 0xd8, 0xc8,
	0x2a, 0xa3, 0xff, 0xc8, 0x9c, 0x7f, 0xc9, 0x2a, 0xf7, 0x64, 0xef, 0xa0, 0x1a, 0x28, 0xdd, 0x47,
	0x18, 0xaa, 0x63, 0x97, 0xb9, 0x60, 0xe5, 0x60, 0x03, 0x4f, 0x22, 0xe0, 0x69, 0x04, 0x2c, 0xa7,
	0x11, 0x78, 0xce, 0xed, 0xfd, 0x5a, 0x84, 0x67, 0x22, 0x89, 0xb3, 0x54, 0xd9, 0x5b, 0x99, 0x46,
	0x5f, 0x95, 0xee, 0x0b, 0x1b, 0xd9, 0x6c, 0x84, 0x76, 0xe0, 0xa5, 0xa0, 0xad, 0x2e, 0x67, 0xf2,
	0x73, 0x28, 0x39, 0x69, 0x33, 0xef, 0x34, 0x14, 0x92, 0xc8, 0xae, 0x08, 0xbb, 0x9e, 0x08, 0x68,
	0x8b, 0x9d, 0x30, 0xda, 0x76, 0xff, 0x43, 0x47, 0xd0, 0x2c, 0x03, 0x3d, 0x5f, 0x86, 0xa4, 0x47,
	0x58, 0x87, 0x1c, 0x77, 0x68, 0x78, 0xe2, 0xf3, 0x29, 0xe0, 0x3a, 0x68, 0x0f, 0x5e, 0x97, 0xc9,
	0xfc, 0x80, 0x7a, 0xe3, 0x32, 0xa0, 0x9c, 0xf9, 0x6d, 0xb7, 0x32, 0x8b, 0x6d, 0x75, 0x7c, 0x71,
	0x8f, 0x5d, 0x40, 0x6f, 0xa1, 0x5e, 0xc6, 0x1e, 0x73, 0x4a, 0xce, 0x42, 0xe6, 0x15, 0x2e, 0xaa,
	0xb3, 0x76, 0xf6, 0x7c, 0x7e, 0x4e, 0x3a, 0x05, 0x5b, 0x43, 0x6f, 0x60, 0x67, 0x9e, 0x0b, 0xd2,
	0x6d, 0x49, 0xe6, 0x7b, 0xee, 0x22, 0xda, 0x87, 0xdd, 0x32, 0xb8, 0x4d, 0xf8, 0x59, 0x18, 0xf8,
	0x7e, 0xa7, 0xc0, 0xff, 0x9f, 0xe5, 0xba, 0xcd, 0x44, 0x8b, 0x53, 0x49, 0x0b, 0x7a, 0x09, 0x1d,
	0x00, 0x9e, 0xd7, 0xbb, 0x3b, 0x78, 0xda, 0x97, 0x65, 0xf4, 0x11, 0xde, 0x97, 0x69, 0xa6, 0x25,
	0x91, 0x0f, 0x83, 0x84, 0x01, 0x67, 0x2d, 0xea, 0xc2, 0x2c, 0x7f, 0x82, 0x0a, 0x31, 0x46, 0x89,
	0x10, 0xec, 0xd4, 0xa3, 0x6d, 0x77, 0x05, 0xed, 0xc2, 0xf6, 0x3c, 0x7a, 0x7c, 0x10, 0x75, 0x57,
	0x51, 0x1d, 0x5e, 0xcd, 0x43, 0xc7, 0x91, 0xdc, 0x47, 0xa8, 0x09, 0xfb, 0xa5, 0x2d, 0xa2, 0xa4,
	0x43, 0xf9, 0xc3, 0x2f, 0xf6, 0x18, 0x1d, 0x42, 0x63, 0x8e, 0xe4, 0xaf, 0x2b, 0xf1, 0x64, 0x56,
	0xa3, 0x8a, 0x73, 0xca, 0xae, 0xb5, 0x7b, 0x1c, 0xc1, 0xf3, 0x34, 0xc3, 0xc5, 0x80, 0x51, 0x0f,
	0x86, 0x4a, 0xe0, 0x7c, 0x59, 0xc5, 0x8d, 0x0f, 0x93, 0x89, 0x13, 0x0d, 0xd5, 0xf7, 0x4a, 0x4d,
	0x32, 0x12, 0xb0, 0x1f, 0x95, 0x35, 0x79, 0xa7, 0x61, 0xf9, 0x3b, 0x32, 0x54, 0xb8, 0xd7, 0xfc,
	0x59, 0x79, 0x7a, 0xb7, 0x7c, 0x31, 0x59, 0xbe, 0xe8, 0x35, 0x2f, 0x17, 0xf3, 0xbf, 0xf9, 0xf0,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x2e, 0xfe, 0x1b, 0xd5, 0x04, 0x00, 0x00,
}
